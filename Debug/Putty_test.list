
Putty_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08007454  08007454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a0  080075a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080075a0  080075a0  000175a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075a8  080075a8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a8  080075a8  000175a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075ac  080075ac  000175ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080075b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  24000074  08007624  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000230  08007624  00020230  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197bd  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026b5  00000000  00000000  0003985f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000db0  00000000  00000000  0003bf18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  0003ccc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037549  00000000  00000000  0003d980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afa4  00000000  00000000  00074ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015f7d9  00000000  00000000  0007fe6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001df646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000419c  00000000  00000000  001df6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800743c 	.word	0x0800743c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800743c 	.word	0x0800743c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	printf("Starting!");
 8000686:	481b      	ldr	r0, [pc, #108]	; (80006f4 <main+0x74>)
 8000688:	f005 fef4 	bl	8006474 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068c:	f000 fdba 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000690:	f000 f83a 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000694:	f000 f9a2 	bl	80009dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000698:	f000 f954 	bl	8000944 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 800069c:	f000 f8ee 	bl	800087c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  FDCAN_Config();
 80006a0:	f000 face 	bl	8000c40 <FDCAN_Config>
  RetargetInit(&huart3);
 80006a4:	4814      	ldr	r0, [pc, #80]	; (80006f8 <main+0x78>)
 80006a6:	f000 fb0d 	bl	8000cc4 <RetargetInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0){
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	4813      	ldr	r0, [pc, #76]	; (80006fc <main+0x7c>)
 80006ae:	f001 fb65 	bl	8001d7c <HAL_FDCAN_GetRxFifoFillLevel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0f8      	beq.n	80006aa <main+0x2a>
		  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <main+0x80>)
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <main+0x84>)
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <main+0x7c>)
 80006c0:	f001 f9fe 	bl	8001ac0 <HAL_FDCAN_GetRxMessage>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d1ef      	bne.n	80006aa <main+0x2a>
		      {
			  	  for(int i=0;i<8;i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e009      	b.n	80006e4 <main+0x64>
			  			  printf("%c",RxData[i]);
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <main+0x80>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f005 fee3 	bl	80064a4 <putchar>
			  	  for(int i=0;i<8;i++){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b07      	cmp	r3, #7
 80006e8:	ddf2      	ble.n	80006d0 <main+0x50>
			  	  }
			  	  printf("\n");
 80006ea:	200a      	movs	r0, #10
 80006ec:	f005 feda 	bl	80064a4 <putchar>
	  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0){
 80006f0:	e7db      	b.n	80006aa <main+0x2a>
 80006f2:	bf00      	nop
 80006f4:	08007454 	.word	0x08007454
 80006f8:	240000a4 	.word	0x240000a4
 80006fc:	24000130 	.word	0x24000130
 8000700:	24000090 	.word	0x24000090
 8000704:	240001fc 	.word	0x240001fc

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0cc      	sub	sp, #304	; 0x130
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000712:	224c      	movs	r2, #76	; 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f005 fea3 	bl	8006462 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000720:	2220      	movs	r2, #32
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f005 fe9c 	bl	8006462 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	4618      	mov	r0, r3
 8000730:	23bc      	movs	r3, #188	; 0xbc
 8000732:	461a      	mov	r2, r3
 8000734:	2100      	movs	r1, #0
 8000736:	f005 fe94 	bl	8006462 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800073a:	2002      	movs	r0, #2
 800073c:	f002 f9a0 	bl	8002a80 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	4b4b      	ldr	r3, [pc, #300]	; (8000874 <SystemClock_Config+0x16c>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	4a4a      	ldr	r2, [pc, #296]	; (8000874 <SystemClock_Config+0x16c>)
 800074c:	f023 0301 	bic.w	r3, r3, #1
 8000750:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000752:	4b48      	ldr	r3, [pc, #288]	; (8000874 <SystemClock_Config+0x16c>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	f003 0201 	and.w	r2, r3, #1
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	4b46      	ldr	r3, [pc, #280]	; (8000878 <SystemClock_Config+0x170>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000766:	4a44      	ldr	r2, [pc, #272]	; (8000878 <SystemClock_Config+0x170>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <SystemClock_Config+0x170>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800077e:	bf00      	nop
 8000780:	4b3d      	ldr	r3, [pc, #244]	; (8000878 <SystemClock_Config+0x170>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800078c:	d1f8      	bne.n	8000780 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078e:	2302      	movs	r3, #2
 8000790:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000794:	2301      	movs	r3, #1
 8000796:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079a:	2340      	movs	r3, #64	; 0x40
 800079c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 9;
 80007b2:	2309      	movs	r3, #9
 80007b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007be:	2302      	movs	r3, #2
 80007c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ca:	230c      	movs	r3, #12
 80007cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007d0:	2302      	movs	r3, #2
 80007d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80007d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 f986 	bl	8002af4 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007ee:	f000 fa61 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	233f      	movs	r3, #63	; 0x3f
 80007f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000822:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fd73 	bl	8003314 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8000834:	f000 fa3e 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN;
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	f248 0202 	movw	r2, #32770	; 0x8002
 8000840:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800084a:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	2200      	movs	r2, #0
 8000852:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4618      	mov	r0, r3
 800085a:	f003 f8df 	bl	8003a1c <HAL_RCCEx_PeriphCLKConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8000864:	f000 fa26 	bl	8000cb4 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	58000400 	.word	0x58000400
 8000878:	58024800 	.word	0x58024800

0800087c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <MX_FDCAN1_Init+0xc0>)
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <MX_FDCAN1_Init+0xc4>)
 8000884:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_FDCAN1_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_FDCAN1_Init+0xc0>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_FDCAN1_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <MX_FDCAN1_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800089e:	4b27      	ldr	r3, [pc, #156]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80008a4:	4b25      	ldr	r3, [pc, #148]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008b2:	223f      	movs	r2, #63	; 0x3f
 80008b4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008b8:	2210      	movs	r2, #16
 80008ba:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008be:	2201      	movs	r2, #1
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008d0:	2204      	movs	r2, #4
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008dc:	2202      	movs	r2, #2
 80008de:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 10;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_FDCAN1_Init+0xc0>)
 80008fa:	2204      	movs	r2, #4
 80008fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_FDCAN1_Init+0xc0>)
 8000900:	2200      	movs	r2, #0
 8000902:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_FDCAN1_Init+0xc0>)
 8000906:	2204      	movs	r2, #4
 8000908:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_FDCAN1_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_FDCAN1_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_FDCAN1_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_FDCAN1_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_FDCAN1_Init+0xc0>)
 8000924:	2204      	movs	r2, #4
 8000926:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_FDCAN1_Init+0xc0>)
 800092a:	f000 fe19 	bl	8001560 <HAL_FDCAN_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000934:	f000 f9be 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	24000130 	.word	0x24000130
 8000940:	4000a000 	.word	0x4000a000

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <MX_USART3_UART_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800098e:	f004 fb45 	bl	800501c <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f98c 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009a0:	f005 fc45 	bl	800622e <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f983 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009b2:	f005 fc7a 	bl	80062aa <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f97a 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009c2:	f005 fbfb 	bl	80061bc <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f972 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	240000a4 	.word	0x240000a4
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b8b      	ldr	r3, [pc, #556]	; (8000c20 <MX_GPIO_Init+0x244>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a89      	ldr	r2, [pc, #548]	; (8000c20 <MX_GPIO_Init+0x244>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b87      	ldr	r3, [pc, #540]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a10:	4b83      	ldr	r3, [pc, #524]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	4a82      	ldr	r2, [pc, #520]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a20:	4b7f      	ldr	r3, [pc, #508]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b7c      	ldr	r3, [pc, #496]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	4a7a      	ldr	r2, [pc, #488]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3e:	4b78      	ldr	r3, [pc, #480]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b74      	ldr	r3, [pc, #464]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	4a73      	ldr	r2, [pc, #460]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5c:	4b70      	ldr	r3, [pc, #448]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	4b6d      	ldr	r3, [pc, #436]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	4a6b      	ldr	r2, [pc, #428]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a72:	f043 0308 	orr.w	r3, r3, #8
 8000a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7a:	4b69      	ldr	r3, [pc, #420]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a88:	4b65      	ldr	r3, [pc, #404]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8e:	4a64      	ldr	r2, [pc, #400]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a98:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa6:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aac:	4a5c      	ldr	r2, [pc, #368]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000aae:	f043 0310 	orr.w	r3, r3, #16
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab6:	4b5a      	ldr	r3, [pc, #360]	; (8000c20 <MX_GPIO_Init+0x244>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abc:	f003 0310 	and.w	r3, r3, #16
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f244 0101 	movw	r1, #16385	; 0x4001
 8000aca:	4856      	ldr	r0, [pc, #344]	; (8000c24 <MX_GPIO_Init+0x248>)
 8000acc:	f001 ffbe 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad6:	4854      	ldr	r0, [pc, #336]	; (8000c28 <MX_GPIO_Init+0x24c>)
 8000ad8:	f001 ffb8 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4852      	ldr	r0, [pc, #328]	; (8000c2c <MX_GPIO_Init+0x250>)
 8000ae2:	f001 ffb3 	bl	8002a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	484d      	ldr	r0, [pc, #308]	; (8000c30 <MX_GPIO_Init+0x254>)
 8000afc:	f001 fdf6 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b00:	2332      	movs	r3, #50	; 0x32
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b10:	230b      	movs	r3, #11
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4845      	ldr	r0, [pc, #276]	; (8000c30 <MX_GPIO_Init+0x254>)
 8000b1c:	f001 fde6 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b20:	2386      	movs	r3, #134	; 0x86
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	483e      	ldr	r0, [pc, #248]	; (8000c34 <MX_GPIO_Init+0x258>)
 8000b3c:	f001 fdd6 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000b40:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4832      	ldr	r0, [pc, #200]	; (8000c24 <MX_GPIO_Init+0x248>)
 8000b5a:	f001 fdc7 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b70:	230b      	movs	r3, #11
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482a      	ldr	r0, [pc, #168]	; (8000c24 <MX_GPIO_Init+0x248>)
 8000b7c:	f001 fdb6 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4823      	ldr	r0, [pc, #140]	; (8000c28 <MX_GPIO_Init+0x24c>)
 8000b9a:	f001 fda7 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba2:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_GPIO_Init+0x25c>)
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4822      	ldr	r0, [pc, #136]	; (8000c3c <MX_GPIO_Init+0x260>)
 8000bb2:	f001 fd9b 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bb6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bc8:	230a      	movs	r3, #10
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4818      	ldr	r0, [pc, #96]	; (8000c34 <MX_GPIO_Init+0x258>)
 8000bd4:	f001 fd8a 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bd8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bea:	230b      	movs	r3, #11
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_GPIO_Init+0x260>)
 8000bf6:	f001 fd79 	bl	80026ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_GPIO_Init+0x250>)
 8000c12:	f001 fd6b 	bl	80026ec <HAL_GPIO_Init>

}
 8000c16:	bf00      	nop
 8000c18:	3730      	adds	r7, #48	; 0x30
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	58024400 	.word	0x58024400
 8000c24:	58020400 	.word	0x58020400
 8000c28:	58020c00 	.word	0x58020c00
 8000c2c:	58021000 	.word	0x58021000
 8000c30:	58020800 	.word	0x58020800
 8000c34:	58020000 	.word	0x58020000
 8000c38:	11110000 	.word	0x11110000
 8000c3c:	58021800 	.word	0x58021800

08000c40 <FDCAN_Config>:

/* USER CODE BEGIN 4 */
static void FDCAN_Config(void){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
	  sFilterConfig.FilterIndex = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000c52:	2301      	movs	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterID1 = 0x321;
 8000c56:	f240 3321 	movw	r3, #801	; 0x321
 8000c5a:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterID2 = 0x7FF;
 8000c5c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c60:	617b      	str	r3, [r7, #20]
	  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) == HAL_OK)
 8000c62:	463b      	mov	r3, r7
 8000c64:	4619      	mov	r1, r3
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <FDCAN_Config+0x6c>)
 8000c68:	f000 fe5c 	bl	8001924 <HAL_FDCAN_ConfigFilter>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <FDCAN_Config+0x38>
	  {
	    printf("Filter configured");
 8000c72:	480f      	ldr	r0, [pc, #60]	; (8000cb0 <FDCAN_Config+0x70>)
 8000c74:	f005 fbfe 	bl	8006474 <iprintf>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	2202      	movs	r2, #2
 8000c80:	2102      	movs	r1, #2
 8000c82:	480a      	ldr	r0, [pc, #40]	; (8000cac <FDCAN_Config+0x6c>)
 8000c84:	f000 fec4 	bl	8001a10 <HAL_FDCAN_ConfigGlobalFilter>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <FDCAN_Config+0x52>
	  {
	    Error_Handler();
 8000c8e:	f000 f811 	bl	8000cb4 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <FDCAN_Config+0x6c>)
 8000c94:	f000 fee9 	bl	8001a6a <HAL_FDCAN_Start>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <FDCAN_Config+0x62>
	  {
	    Error_Handler();
 8000c9e:	f000 f809 	bl	8000cb4 <Error_Handler>
	  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3720      	adds	r7, #32
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	24000130 	.word	0x24000130
 8000cb0:	08007460 	.word	0x08007460

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ccc:	4a07      	ldr	r2, [pc, #28]	; (8000cec <RetargetInit+0x28>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <RetargetInit+0x2c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	6898      	ldr	r0, [r3, #8]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	2202      	movs	r2, #2
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f005 fbf5 	bl	80064cc <setvbuf>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000224 	.word	0x24000224
 8000cf0:	24000010 	.word	0x24000010

08000cf4 <_isatty>:

int _isatty(int fd) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db04      	blt.n	8000d0c <_isatty+0x18>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	dc01      	bgt.n	8000d0c <_isatty+0x18>
    return 1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e005      	b.n	8000d18 <_isatty+0x24>

  errno = EBADF;
 8000d0c:	f005 fb74 	bl	80063f8 <__errno>
 8000d10:	4602      	mov	r2, r0
 8000d12:	2309      	movs	r3, #9
 8000d14:	6013      	str	r3, [r2, #0]
  return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_write>:

int _write(int fd, char* ptr, int len) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d002      	beq.n	8000d38 <_write+0x18>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d111      	bne.n	8000d5c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <_write+0x54>)
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	f004 f9b9 	bl	80050bc <HAL_UART_Transmit>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000d4e:	7dfb      	ldrb	r3, [r7, #23]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <_write+0x38>
      return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	e008      	b.n	8000d6a <_write+0x4a>
    else
      return EIO;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	e006      	b.n	8000d6a <_write+0x4a>
  }
  errno = EBADF;
 8000d5c:	f005 fb4c 	bl	80063f8 <__errno>
 8000d60:	4602      	mov	r2, r0
 8000d62:	2309      	movs	r3, #9
 8000d64:	6013      	str	r3, [r2, #0]
  return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	24000224 	.word	0x24000224

08000d78 <_close>:

int _close(int fd) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db04      	blt.n	8000d90 <_close+0x18>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	dc01      	bgt.n	8000d90 <_close+0x18>
    return 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e006      	b.n	8000d9e <_close+0x26>

  errno = EBADF;
 8000d90:	f005 fb32 	bl	80063f8 <__errno>
 8000d94:	4602      	mov	r2, r0
 8000d96:	2309      	movs	r3, #9
 8000d98:	6013      	str	r3, [r2, #0]
  return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000db2:	f005 fb21 	bl	80063f8 <__errno>
 8000db6:	4602      	mov	r2, r0
 8000db8:	2309      	movs	r3, #9
 8000dba:	6013      	str	r3, [r2, #0]
  return -1;
 8000dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <_read>:

int _read(int fd, char* ptr, int len) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d110      	bne.n	8000dfc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <_read+0x4c>)
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de2:	2201      	movs	r2, #1
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	f004 f9ff 	bl	80051e8 <HAL_UART_Receive>
 8000dea:	4603      	mov	r3, r0
 8000dec:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000dee:	7dfb      	ldrb	r3, [r7, #23]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <_read+0x30>
      return 1;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e008      	b.n	8000e0a <_read+0x42>
    else
      return EIO;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	e006      	b.n	8000e0a <_read+0x42>
  }
  errno = EBADF;
 8000dfc:	f005 fafc 	bl	80063f8 <__errno>
 8000e00:	4602      	mov	r2, r0
 8000e02:	2309      	movs	r3, #9
 8000e04:	6013      	str	r3, [r2, #0]
  return -1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	24000224 	.word	0x24000224

08000e18 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db08      	blt.n	8000e3a <_fstat+0x22>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	dc05      	bgt.n	8000e3a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e34:	605a      	str	r2, [r3, #4]
    return 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e005      	b.n	8000e46 <_fstat+0x2e>
  }

  errno = EBADF;
 8000e3a:	f005 fadd 	bl	80063f8 <__errno>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	2309      	movs	r3, #9
 8000e42:	6013      	str	r3, [r2, #0]
  return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_MspInit+0x30>)
 8000e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e5c:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x30>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x30>)
 8000e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	58024400 	.word	0x58024400

08000e84 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <HAL_FDCAN_MspInit+0x98>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d135      	bne.n	8000f12 <HAL_FDCAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_FDCAN_MspInit+0x9c>)
 8000ea8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eac:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_FDCAN_MspInit+0x9c>)
 8000eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_FDCAN_MspInit+0x9c>)
 8000eb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_FDCAN_MspInit+0x9c>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <HAL_FDCAN_MspInit+0x9c>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_FDCAN_MspInit+0x9c>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ef2:	2309      	movs	r3, #9
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4809      	ldr	r0, [pc, #36]	; (8000f24 <HAL_FDCAN_MspInit+0xa0>)
 8000efe:	f001 fbf5 	bl	80026ec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2013      	movs	r0, #19
 8000f08:	f000 faf5 	bl	80014f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f0c:	2013      	movs	r0, #19
 8000f0e:	f000 fb0c 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	4000a000 	.word	0x4000a000
 8000f20:	58024400 	.word	0x58024400
 8000f24:	58020c00 	.word	0x58020c00

08000f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1a      	ldr	r2, [pc, #104]	; (8000fb0 <HAL_UART_MspInit+0x88>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12e      	bne.n	8000fa8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f64:	613b      	str	r3, [r7, #16]
 8000f66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f98:	2307      	movs	r3, #7
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 0314 	add.w	r3, r7, #20
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000fa4:	f001 fba2 	bl	80026ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40004800 	.word	0x40004800
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58020c00 	.word	0x58020c00

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <MemManage_Handler+0x4>

08000fd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <BusFault_Handler+0x4>

08000fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <UsageFault_Handler+0x4>

08000fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f96a 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <FDCAN1_IT0_IRQHandler+0x10>)
 800101e:	f000 fecb 	bl	8001db8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000130 	.word	0x24000130

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f005 f9cc 	bl	80063f8 <__errno>
 8001060:	4602      	mov	r2, r0
 8001062:	230c      	movs	r3, #12
 8001064:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	24080000 	.word	0x24080000
 800108c:	00000400 	.word	0x00000400
 8001090:	24000098 	.word	0x24000098
 8001094:	24000230 	.word	0x24000230

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800109c:	4b39      	ldr	r3, [pc, #228]	; (8001184 <SystemInit+0xec>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a38      	ldr	r2, [pc, #224]	; (8001184 <SystemInit+0xec>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ac:	4b36      	ldr	r3, [pc, #216]	; (8001188 <SystemInit+0xf0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	2b06      	cmp	r3, #6
 80010b6:	d807      	bhi.n	80010c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b8:	4b33      	ldr	r3, [pc, #204]	; (8001188 <SystemInit+0xf0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 030f 	bic.w	r3, r3, #15
 80010c0:	4a31      	ldr	r2, [pc, #196]	; (8001188 <SystemInit+0xf0>)
 80010c2:	f043 0307 	orr.w	r3, r3, #7
 80010c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <SystemInit+0xf4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a2f      	ldr	r2, [pc, #188]	; (800118c <SystemInit+0xf4>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <SystemInit+0xf4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010da:	4b2c      	ldr	r3, [pc, #176]	; (800118c <SystemInit+0xf4>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	492b      	ldr	r1, [pc, #172]	; (800118c <SystemInit+0xf4>)
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <SystemInit+0xf8>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <SystemInit+0xf0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	2b07      	cmp	r3, #7
 80010f0:	d907      	bls.n	8001102 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <SystemInit+0xf0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 030f 	bic.w	r3, r3, #15
 80010fa:	4a23      	ldr	r2, [pc, #140]	; (8001188 <SystemInit+0xf0>)
 80010fc:	f043 0307 	orr.w	r3, r3, #7
 8001100:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001102:	4b22      	ldr	r3, [pc, #136]	; (800118c <SystemInit+0xf4>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001108:	4b20      	ldr	r3, [pc, #128]	; (800118c <SystemInit+0xf4>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <SystemInit+0xf4>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <SystemInit+0xf4>)
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <SystemInit+0xfc>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <SystemInit+0xf4>)
 800111c:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <SystemInit+0x100>)
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <SystemInit+0xf4>)
 8001122:	4a1e      	ldr	r2, [pc, #120]	; (800119c <SystemInit+0x104>)
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <SystemInit+0xf4>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <SystemInit+0xf4>)
 800112e:	4a1b      	ldr	r2, [pc, #108]	; (800119c <SystemInit+0x104>)
 8001130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <SystemInit+0xf4>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <SystemInit+0xf4>)
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <SystemInit+0x104>)
 800113c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <SystemInit+0xf4>)
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <SystemInit+0xf4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a10      	ldr	r2, [pc, #64]	; (800118c <SystemInit+0xf4>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <SystemInit+0xf4>)
 8001152:	2200      	movs	r2, #0
 8001154:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <SystemInit+0x108>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <SystemInit+0x10c>)
 800115c:	4013      	ands	r3, r2
 800115e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001162:	d202      	bcs.n	800116a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <SystemInit+0x110>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <SystemInit+0x114>)
 800116c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001170:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SystemInit+0xec>)
 8001174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001178:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	52002000 	.word	0x52002000
 800118c:	58024400 	.word	0x58024400
 8001190:	eaf6ed7f 	.word	0xeaf6ed7f
 8001194:	02020200 	.word	0x02020200
 8001198:	01ff0000 	.word	0x01ff0000
 800119c:	01010280 	.word	0x01010280
 80011a0:	5c001000 	.word	0x5c001000
 80011a4:	ffff0000 	.word	0xffff0000
 80011a8:	51008108 	.word	0x51008108
 80011ac:	52004000 	.word	0x52004000

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011b4:	f7ff ff70 	bl	8001098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011ba:	e003      	b.n	80011c4 <LoopCopyDataInit>

080011bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80011be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011c2:	3104      	adds	r1, #4

080011c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80011c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011cc:	d3f6      	bcc.n	80011bc <CopyDataInit>
  ldr  r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80011d0:	e002      	b.n	80011d8 <LoopFillZerobss>

080011d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011d4:	f842 3b04 	str.w	r3, [r2], #4

080011d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80011da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011dc:	d3f9      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011de:	f005 f911 	bl	8006404 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fa4d 	bl	8000680 <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80011ec:	080075b0 	.word	0x080075b0
  ldr  r0, =_sdata
 80011f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80011f4:	24000074 	.word	0x24000074
  ldr  r2, =_sbss
 80011f8:	24000074 	.word	0x24000074
  ldr  r3, = _ebss
 80011fc:	24000230 	.word	0x24000230

08001200 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC3_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120a:	2003      	movs	r0, #3
 800120c:	f000 f968 	bl	80014e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001210:	f002 fa36 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 8001214:	4601      	mov	r1, r0
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_Init+0x68>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	0a1b      	lsrs	r3, r3, #8
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_Init+0x6c>)
 8001222:	5cd3      	ldrb	r3, [r2, r3]
 8001224:	f003 031f 	and.w	r3, r3, #31
 8001228:	fa21 f303 	lsr.w	r3, r1, r3
 800122c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <HAL_Init+0x68>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_Init+0x6c>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_Init+0x70>)
 8001246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001248:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <HAL_Init+0x74>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f814 	bl	800127c <HAL_InitTick>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e002      	b.n	8001264 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800125e:	f7ff fdf7 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	58024400 	.word	0x58024400
 8001270:	080074d0 	.word	0x080074d0
 8001274:	24000004 	.word	0x24000004
 8001278:	24000000 	.word	0x24000000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001284:	4b15      	ldr	r3, [pc, #84]	; (80012dc <HAL_InitTick+0x60>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e021      	b.n	80012d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_InitTick+0x64>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_InitTick+0x60>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f94d 	bl	8001546 <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c4:	f000 f917 	bl	80014f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x68>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2400000c 	.word	0x2400000c
 80012e0:	24000000 	.word	0x24000000
 80012e4:	24000008 	.word	0x24000008

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	2400000c 	.word	0x2400000c
 800130c:	24000228 	.word	0x24000228

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	24000228 	.word	0x24000228

08001328 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetREVID+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0c1b      	lsrs	r3, r3, #16
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	5c001000 	.word	0x5c001000

08001340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <__NVIC_SetPriorityGrouping+0x40>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	4313      	orrs	r3, r2
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x40>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00
 8001384:	05fa0000 	.word	0x05fa0000

08001388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	db0b      	blt.n	80013ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	f003 021f 	and.w	r2, r3, #31
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <__NVIC_EnableIRQ+0x38>)
 80013be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	2001      	movs	r0, #1
 80013c6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ac:	d301      	bcc.n	80014b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ae:	2301      	movs	r3, #1
 80014b0:	e00f      	b.n	80014d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b2:	4a0a      	ldr	r2, [pc, #40]	; (80014dc <SysTick_Config+0x40>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ba:	210f      	movs	r1, #15
 80014bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c0:	f7ff ff8e 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SysTick_Config+0x40>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ca:	4b04      	ldr	r3, [pc, #16]	; (80014dc <SysTick_Config+0x40>)
 80014cc:	2207      	movs	r2, #7
 80014ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	e000e010 	.word	0xe000e010

080014e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ff29 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff40 	bl	8001388 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff90 	bl	8001434 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5f 	bl	80013e0 <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff33 	bl	80013a4 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa4 	bl	800149c <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b098      	sub	sp, #96	; 0x60
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001568:	4a84      	ldr	r2, [pc, #528]	; (800177c <HAL_FDCAN_Init+0x21c>)
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4611      	mov	r1, r2
 8001570:	224c      	movs	r2, #76	; 0x4c
 8001572:	4618      	mov	r0, r3
 8001574:	f004 ff6a 	bl	800644c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1ca      	b.n	8001918 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7e      	ldr	r2, [pc, #504]	; (8001780 <HAL_FDCAN_Init+0x220>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d106      	bne.n	800159a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fc68 	bl	8000e84 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0210 	bic.w	r2, r2, #16
 80015c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff fea4 	bl	8001310 <HAL_GetTick>
 80015c8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015ca:	e014      	b.n	80015f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015cc:	f7ff fea0 	bl	8001310 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d90d      	bls.n	80015f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e190      	b.n	8001918 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b08      	cmp	r3, #8
 8001602:	d0e3      	beq.n	80015cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001614:	f7ff fe7c 	bl	8001310 <HAL_GetTick>
 8001618:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800161a:	e014      	b.n	8001646 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800161c:	f7ff fe78 	bl	8001310 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b0a      	cmp	r3, #10
 8001628:	d90d      	bls.n	8001646 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2203      	movs	r2, #3
 800163e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e168      	b.n	8001918 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0e3      	beq.n	800161c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0202 	orr.w	r2, r2, #2
 8001662:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7c1b      	ldrb	r3, [r3, #16]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800167a:	619a      	str	r2, [r3, #24]
 800167c:	e007      	b.n	800168e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800168c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7c5b      	ldrb	r3, [r3, #17]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	e007      	b.n	80016b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80016b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7c9b      	ldrb	r3, [r3, #18]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	e007      	b.n	80016e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001706:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0210 	bic.w	r2, r2, #16
 8001716:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0204 	orr.w	r2, r2, #4
 800172e:	619a      	str	r2, [r3, #24]
 8001730:	e030      	b.n	8001794 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02c      	beq.n	8001794 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d020      	beq.n	8001784 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001750:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0210 	orr.w	r2, r2, #16
 8001760:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d114      	bne.n	8001794 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	619a      	str	r2, [r3, #24]
 800177a:	e00b      	b.n	8001794 <HAL_FDCAN_Init+0x234>
 800177c:	08007474 	.word	0x08007474
 8001780:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0220 	orr.w	r2, r2, #32
 8001792:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	3b01      	subs	r3, #1
 800179a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80017ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80017c8:	d115      	bne.n	80017f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	3b01      	subs	r3, #1
 80017d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80017d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	3b01      	subs	r3, #1
 80017e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80017e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	3b01      	subs	r3, #1
 80017ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80017f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80017f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00a      	beq.n	8001814 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181c:	4413      	add	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800182a:	f023 0107 	bic.w	r1, r3, #7
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001838:	4413      	add	r3, r2
 800183a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2b00      	cmp	r3, #0
 800184e:	d012      	beq.n	8001876 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001858:	f023 0107 	bic.w	r1, r3, #7
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001866:	4413      	add	r3, r2
 8001868:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187a:	2b00      	cmp	r3, #0
 800187c:	d013      	beq.n	80018a6 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001886:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001894:	4413      	add	r3, r2
 8001896:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800189a:	011a      	lsls	r2, r3, #4
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d013      	beq.n	80018d6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80018b6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80018c4:	4413      	add	r3, r2
 80018c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80018ca:	021a      	lsls	r2, r3, #8
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a11      	ldr	r2, [pc, #68]	; (8001920 <HAL_FDCAN_Init+0x3c0>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d107      	bne.n	80018f0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f022 0203 	bic.w	r2, r2, #3
 80018ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fd69 	bl	80023e0 <FDCAN_CalcultateRamBlockAddresses>
 800190e:	4603      	mov	r3, r0
 8001910:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001914:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001918:	4618      	mov	r0, r3
 800191a:	3760      	adds	r7, #96	; 0x60
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	4000a000 	.word	0x4000a000

08001924 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001934:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d002      	beq.n	8001942 <HAL_FDCAN_ConfigFilter+0x1e>
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d157      	bne.n	80019f2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d12b      	bne.n	80019a2 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b07      	cmp	r3, #7
 8001950:	d10d      	bne.n	800196e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800195e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001964:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8001966:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e00e      	b.n	800198c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800197a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001982:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001988:	4313      	orrs	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e025      	b.n	80019ee <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	075a      	lsls	r2, r3, #29
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b07      	cmp	r3, #7
 80019b6:	d103      	bne.n	80019c0 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	e006      	b.n	80019ce <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	079a      	lsls	r2, r3, #30
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3304      	adds	r3, #4
 80019e6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e008      	b.n	8001a04 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019f8:	f043 0202 	orr.w	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d110      	bne.n	8001a4c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001a32:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001a38:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001a44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e008      	b.n	8001a5e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a52:	f043 0204 	orr.w	r2, r3, #4
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d111      	bne.n	8001aa2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2202      	movs	r2, #2
 8001a82:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0201 	bic.w	r2, r2, #1
 8001a94:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e008      	b.n	8001ab4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001aa8:	f043 0204 	orr.w	r2, r3, #4
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
  }
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ad8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001ada:	7efb      	ldrb	r3, [r7, #27]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	f040 813b 	bne.w	8001d58 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b40      	cmp	r3, #64	; 0x40
 8001ae6:	d145      	bne.n	8001b74 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001af0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001afe:	f043 0220 	orr.w	r2, r3, #32
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e12e      	b.n	8001d6a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e11c      	b.n	8001d6a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b38:	0e1b      	lsrs	r3, r3, #24
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d103      	bne.n	8001b4a <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b58:	69fa      	ldr	r2, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	69f9      	ldr	r1, [r7, #28]
 8001b68:	fb01 f303 	mul.w	r3, r1, r3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
 8001b72:	e061      	b.n	8001c38 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b41      	cmp	r3, #65	; 0x41
 8001b78:	d145      	bne.n	8001c06 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001b82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0e5      	b.n	8001d6a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bb4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0d3      	b.n	8001d6a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001bca:	0e1b      	lsrs	r3, r3, #24
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d103      	bne.n	8001bdc <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	4413      	add	r3, r2
 8001bee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	69f9      	ldr	r1, [r7, #28]
 8001bfa:	fb01 f303 	mul.w	r3, r1, r3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
 8001c04:	e018      	b.n	8001c38 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d309      	bcc.n	8001c24 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c16:	f043 0220 	orr.w	r2, r3, #32
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0a2      	b.n	8001d6a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	fb01 f303 	mul.w	r3, r1, r3
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d107      	bne.n	8001c5c <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e005      	b.n	8001c68 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	3304      	adds	r3, #4
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0e1b      	lsrs	r3, r3, #24
 8001cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0fda      	lsrs	r2, r3, #31
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	3304      	adds	r3, #4
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	e00a      	b.n	8001cf2 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	441a      	add	r2, r3
 8001ce2:	6839      	ldr	r1, [r7, #0]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	440b      	add	r3, r1
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	623b      	str	r3, [r7, #32]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	0c1b      	lsrs	r3, r3, #16
 8001cf8:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <HAL_FDCAN_GetRxMessage+0x2b8>)
 8001cfa:	5cd3      	ldrb	r3, [r2, r3]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d3eb      	bcc.n	8001cdc <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d105      	bne.n	8001d16 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001d14:	e01e      	b.n	8001d54 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b41      	cmp	r3, #65	; 0x41
 8001d1a:	d105      	bne.n	8001d28 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001d26:	e015      	b.n	8001d54 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b1f      	cmp	r3, #31
 8001d2c:	d808      	bhi.n	8001d40 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2101      	movs	r1, #1
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001d3e:	e009      	b.n	8001d54 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 021f 	and.w	r2, r3, #31
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	e008      	b.n	8001d6a <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d5e:	f043 0208 	orr.w	r2, r3, #8
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
  }
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	372c      	adds	r7, #44	; 0x2c
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	080074e0 	.word	0x080074e0

08001d7c <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Level Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b40      	cmp	r3, #64	; 0x40
 8001d8a:	d107      	bne.n	8001d9c <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	e006      	b.n	8001daa <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b092      	sub	sp, #72	; 0x48
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001dc0:	4b90      	ldr	r3, [pc, #576]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	079b      	lsls	r3, r3, #30
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001dc8:	4b8e      	ldr	r3, [pc, #568]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	079b      	lsls	r3, r3, #30
 8001dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dda:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001de8:	4013      	ands	r3, r2
 8001dea:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e00:	4013      	ands	r3, r2
 8001e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e18:	4013      	ands	r3, r2
 8001e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e22:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e30:	4013      	ands	r3, r2
 8001e32:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e48:	4013      	ands	r3, r2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d011      	beq.n	8001e7e <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00a      	beq.n	8001e7e <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e70:	651a      	str	r2, [r3, #80]	; 0x50
 8001e72:	4b64      	ldr	r3, [pc, #400]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fa65 	bl	8002348 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01e      	beq.n	8001eca <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d017      	beq.n	8001eca <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eae:	4013      	ands	r3, r2
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eba:	651a      	str	r2, [r3, #80]	; 0x50
 8001ebc:	4b51      	ldr	r3, [pc, #324]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fa16 	bl	80022f6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00d      	beq.n	8001eec <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ed6:	4b4c      	ldr	r3, [pc, #304]	; (8002008 <HAL_FDCAN_IRQHandler+0x250>)
 8001ed8:	400b      	ands	r3, r1
 8001eda:	6513      	str	r3, [r2, #80]	; 0x50
 8001edc:	4a49      	ldr	r2, [pc, #292]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee0:	0f9b      	lsrs	r3, r3, #30
 8001ee2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001ee4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f9c4 	bl	8002274 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00d      	beq.n	8001f0e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_FDCAN_IRQHandler+0x250>)
 8001efa:	400b      	ands	r3, r1
 8001efc:	6513      	str	r3, [r2, #80]	; 0x50
 8001efe:	4a41      	ldr	r2, [pc, #260]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f02:	0f9b      	lsrs	r3, r3, #30
 8001f04:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f9be 	bl	800228a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f1a:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_FDCAN_IRQHandler+0x250>)
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	6513      	str	r3, [r2, #80]	; 0x50
 8001f20:	4a38      	ldr	r2, [pc, #224]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f24:	0f9b      	lsrs	r3, r3, #30
 8001f26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f9b8 	bl	80022a0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_FDCAN_IRQHandler+0x250>)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	6513      	str	r3, [r2, #80]	; 0x50
 8001f42:	4a30      	ldr	r2, [pc, #192]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f46:	0f9b      	lsrs	r3, r3, #30
 8001f48:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f9b2 	bl	80022b6 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d011      	beq.n	8001f84 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f76:	651a      	str	r2, [r3, #80]	; 0x50
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f9a4 	bl	80022cc <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d01e      	beq.n	8001fd0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d017      	beq.n	8001fd0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc0:	651a      	str	r2, [r3, #80]	; 0x50
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001fc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f988 	bl	80022e0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d016      	beq.n	800200c <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00f      	beq.n	800200c <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ff4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ff6:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_FDCAN_IRQHandler+0x24c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f985 	bl	800230c <HAL_FDCAN_RxBufferNewMessageCallback>
 8002002:	e003      	b.n	800200c <HAL_FDCAN_IRQHandler+0x254>
 8002004:	4000a800 	.word	0x4000a800
 8002008:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d011      	beq.n	800203e <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00a      	beq.n	800203e <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002030:	651a      	str	r2, [r3, #80]	; 0x50
 8002032:	4b8d      	ldr	r3, [pc, #564]	; (8002268 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002034:	2200      	movs	r2, #0
 8002036:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f971 	bl	8002320 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d011      	beq.n	8002070 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002062:	651a      	str	r2, [r3, #80]	; 0x50
 8002064:	4b80      	ldr	r3, [pc, #512]	; (8002268 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f962 	bl	8002334 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00f      	beq.n	80020ac <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002094:	651a      	str	r2, [r3, #80]	; 0x50
 8002096:	4b74      	ldr	r3, [pc, #464]	; (8002268 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020a2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00d      	beq.n	80020ce <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020b8:	4b6c      	ldr	r3, [pc, #432]	; (800226c <HAL_FDCAN_IRQHandler+0x4b4>)
 80020ba:	400b      	ands	r3, r1
 80020bc:	6513      	str	r3, [r2, #80]	; 0x50
 80020be:	4a6a      	ldr	r2, [pc, #424]	; (8002268 <HAL_FDCAN_IRQHandler+0x4b0>)
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	0f9b      	lsrs	r3, r3, #30
 80020c4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80020c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f951 	bl	8002370 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d011      	beq.n	80020f8 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020da:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_FDCAN_IRQHandler+0x4b4>)
 80020dc:	400b      	ands	r3, r1
 80020de:	6513      	str	r3, [r2, #80]	; 0x50
 80020e0:	4a61      	ldr	r2, [pc, #388]	; (8002268 <HAL_FDCAN_IRQHandler+0x4b0>)
 80020e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e4:	0f9b      	lsrs	r3, r3, #30
 80020e6:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a5c      	ldr	r2, [pc, #368]	; (8002270 <HAL_FDCAN_IRQHandler+0x4b8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	f040 80a6 	bne.w	8002250 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 809e 	beq.w	8002250 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002128:	4013      	ands	r3, r2
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002136:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	6a3a      	ldr	r2, [r7, #32]
 8002140:	4013      	ands	r3, r2
 8002142:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800214e:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	4013      	ands	r3, r2
 800215a:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002166:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800217e:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d007      	beq.n	80021a2 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002198:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800219a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f8f2 	bl	8002386 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	6a3a      	ldr	r2, [r7, #32]
 80021ae:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8f2 	bl	800239c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01b      	beq.n	80021fe <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d014      	beq.n	80021fe <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	b29b      	uxth	r3, r3
 80021de:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ea:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2240      	movs	r2, #64	; 0x40
 80021f2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	6939      	ldr	r1, [r7, #16]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 f8da 	bl	80023b2 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800220c:	69f9      	ldr	r1, [r7, #28]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8db 	bl	80023ca <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d002      	beq.n	8002260 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f87e 	bl	800235c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002260:	bf00      	nop
 8002262:	3748      	adds	r7, #72	; 0x48
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	4000a800 	.word	0x4000a800
 800226c:	3fcfffff 	.word	0x3fcfffff
 8002270:	4000a000 	.word	0x4000a000

08002274 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b085      	sub	sp, #20
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ec:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80023f6:	4ba7      	ldr	r3, [pc, #668]	; (8002694 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	0091      	lsls	r1, r2, #2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	430b      	orrs	r3, r1
 8002404:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002410:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	041a      	lsls	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	4413      	add	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002436:	4b97      	ldr	r3, [pc, #604]	; (8002694 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002438:	4013      	ands	r3, r2
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	0091      	lsls	r1, r2, #2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	430b      	orrs	r3, r1
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4413      	add	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002478:	4b86      	ldr	r3, [pc, #536]	; (8002694 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800247a:	4013      	ands	r3, r2
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	0091      	lsls	r1, r2, #2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002492:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	041a      	lsls	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024c0:	4b74      	ldr	r3, [pc, #464]	; (8002694 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	0091      	lsls	r1, r2, #2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80024da:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024e2:	041a      	lsls	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	4413      	add	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002508:	4b62      	ldr	r3, [pc, #392]	; (8002694 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800250a:	4013      	ands	r3, r2
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	0091      	lsls	r1, r2, #2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	430b      	orrs	r3, r1
 8002516:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002522:	fb02 f303 	mul.w	r3, r2, r3
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002534:	4b57      	ldr	r3, [pc, #348]	; (8002694 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002536:	4013      	ands	r3, r2
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	0091      	lsls	r1, r2, #2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	430b      	orrs	r3, r1
 8002542:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800254e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002556:	041a      	lsls	r2, r3, #16
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	4413      	add	r3, r2
 800256c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002576:	4b47      	ldr	r3, [pc, #284]	; (8002694 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002578:	4013      	ands	r3, r2
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	0091      	lsls	r1, r2, #2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	430b      	orrs	r3, r1
 8002584:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002590:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80025ac:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b4:	061a      	lsls	r2, r3, #24
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80025c6:	4413      	add	r3, r2
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	441a      	add	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	441a      	add	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	441a      	add	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	441a      	add	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d915      	bls.n	80026bc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002690:	e006      	b.n	80026a0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002692:	bf00      	nop
 8002694:	ffff0003 	.word	0xffff0003
 8002698:	10002b00 	.word	0x10002b00
 800269c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e010      	b.n	80026de <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	e005      	b.n	80026d0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3304      	adds	r3, #4
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d3f3      	bcc.n	80026c4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop

080026ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80026fa:	4b89      	ldr	r3, [pc, #548]	; (8002920 <HAL_GPIO_Init+0x234>)
 80026fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026fe:	e194      	b.n	8002a2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2101      	movs	r1, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8186 	beq.w	8002a24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d00b      	beq.n	8002738 <HAL_GPIO_Init+0x4c>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d007      	beq.n	8002738 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800272c:	2b11      	cmp	r3, #17
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b12      	cmp	r3, #18
 8002736:	d130      	bne.n	800279a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800276e:	2201      	movs	r2, #1
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4013      	ands	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	091b      	lsrs	r3, r3, #4
 8002784:	f003 0201 	and.w	r2, r3, #1
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	2203      	movs	r2, #3
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d003      	beq.n	80027da <HAL_GPIO_Init+0xee>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b12      	cmp	r3, #18
 80027d8:	d123      	bne.n	8002822 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	08da      	lsrs	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3208      	adds	r2, #8
 80027e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	08da      	lsrs	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3208      	adds	r2, #8
 800281c:	69b9      	ldr	r1, [r7, #24]
 800281e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	2203      	movs	r2, #3
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0203 	and.w	r2, r3, #3
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80e0 	beq.w	8002a24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002864:	4b2f      	ldr	r3, [pc, #188]	; (8002924 <HAL_GPIO_Init+0x238>)
 8002866:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800286a:	4a2e      	ldr	r2, [pc, #184]	; (8002924 <HAL_GPIO_Init+0x238>)
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_GPIO_Init+0x238>)
 8002876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002882:	4a29      	ldr	r2, [pc, #164]	; (8002928 <HAL_GPIO_Init+0x23c>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a20      	ldr	r2, [pc, #128]	; (800292c <HAL_GPIO_Init+0x240>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d052      	beq.n	8002954 <HAL_GPIO_Init+0x268>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_GPIO_Init+0x244>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d031      	beq.n	800291a <HAL_GPIO_Init+0x22e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_GPIO_Init+0x248>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02b      	beq.n	8002916 <HAL_GPIO_Init+0x22a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	; (8002938 <HAL_GPIO_Init+0x24c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d025      	beq.n	8002912 <HAL_GPIO_Init+0x226>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a1c      	ldr	r2, [pc, #112]	; (800293c <HAL_GPIO_Init+0x250>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01f      	beq.n	800290e <HAL_GPIO_Init+0x222>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1b      	ldr	r2, [pc, #108]	; (8002940 <HAL_GPIO_Init+0x254>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x21e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <HAL_GPIO_Init+0x258>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x21a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_GPIO_Init+0x25c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x216>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a18      	ldr	r2, [pc, #96]	; (800294c <HAL_GPIO_Init+0x260>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x212>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_GPIO_Init+0x264>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x20e>
 80028f6:	2309      	movs	r3, #9
 80028f8:	e02d      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 80028fa:	230a      	movs	r3, #10
 80028fc:	e02b      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 80028fe:	2308      	movs	r3, #8
 8002900:	e029      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 8002902:	2307      	movs	r3, #7
 8002904:	e027      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 8002906:	2306      	movs	r3, #6
 8002908:	e025      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 800290a:	2305      	movs	r3, #5
 800290c:	e023      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 800290e:	2304      	movs	r3, #4
 8002910:	e021      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 8002912:	2303      	movs	r3, #3
 8002914:	e01f      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 8002916:	2302      	movs	r3, #2
 8002918:	e01d      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 800291a:	2301      	movs	r3, #1
 800291c:	e01b      	b.n	8002956 <HAL_GPIO_Init+0x26a>
 800291e:	bf00      	nop
 8002920:	58000080 	.word	0x58000080
 8002924:	58024400 	.word	0x58024400
 8002928:	58000400 	.word	0x58000400
 800292c:	58020000 	.word	0x58020000
 8002930:	58020400 	.word	0x58020400
 8002934:	58020800 	.word	0x58020800
 8002938:	58020c00 	.word	0x58020c00
 800293c:	58021000 	.word	0x58021000
 8002940:	58021400 	.word	0x58021400
 8002944:	58021800 	.word	0x58021800
 8002948:	58021c00 	.word	0x58021c00
 800294c:	58022000 	.word	0x58022000
 8002950:	58022400 	.word	0x58022400
 8002954:	2300      	movs	r3, #0
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	f002 0203 	and.w	r2, r2, #3
 800295c:	0092      	lsls	r2, r2, #2
 800295e:	4093      	lsls	r3, r2
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002966:	4938      	ldr	r1, [pc, #224]	; (8002a48 <HAL_GPIO_Init+0x35c>)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3301      	adds	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa22 f303 	lsr.w	r3, r2, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f47f ae63 	bne.w	8002700 <HAL_GPIO_Init+0x14>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	58000400 	.word	0x58000400

08002a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a5c:	787b      	ldrb	r3, [r7, #1]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002a68:	e003      	b.n	8002a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002a6a:	887b      	ldrh	r3, [r7, #2]
 8002a6c:	041a      	lsls	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	619a      	str	r2, [r3, #24]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_PWREx_ConfigSupply+0x70>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d00a      	beq.n	8002aaa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_PWREx_ConfigSupply+0x70>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d001      	beq.n	8002aa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e01f      	b.n	8002ae6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e01d      	b.n	8002ae6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_PWREx_ConfigSupply+0x70>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f023 0207 	bic.w	r2, r3, #7
 8002ab2:	490f      	ldr	r1, [pc, #60]	; (8002af0 <HAL_PWREx_ConfigSupply+0x70>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002aba:	f7fe fc29 	bl	8001310 <HAL_GetTick>
 8002abe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ac0:	e009      	b.n	8002ad6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ac2:	f7fe fc25 	bl	8001310 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ad0:	d901      	bls.n	8002ad6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e007      	b.n	8002ae6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_PWREx_ConfigSupply+0x70>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae2:	d1ee      	bne.n	8002ac2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	58024800 	.word	0x58024800

08002af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e3ff      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8087 	beq.w	8002c22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b14:	4b99      	ldr	r3, [pc, #612]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b1e:	4b97      	ldr	r3, [pc, #604]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d007      	beq.n	8002b3a <HAL_RCC_OscConfig+0x46>
 8002b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2c:	2b18      	cmp	r3, #24
 8002b2e:	d110      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5e>
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d10b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3a:	4b90      	ldr	r3, [pc, #576]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d06c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x12c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d168      	bne.n	8002c20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e3d9      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x76>
 8002b5c:	4b87      	ldr	r3, [pc, #540]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a86      	ldr	r2, [pc, #536]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	e02e      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x98>
 8002b72:	4b82      	ldr	r3, [pc, #520]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a81      	ldr	r2, [pc, #516]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	4b7f      	ldr	r3, [pc, #508]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7e      	ldr	r2, [pc, #504]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e01d      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xbc>
 8002b96:	4b79      	ldr	r3, [pc, #484]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a78      	ldr	r2, [pc, #480]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a75      	ldr	r2, [pc, #468]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCC_OscConfig+0xd4>
 8002bb0:	4b72      	ldr	r3, [pc, #456]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a71      	ldr	r2, [pc, #452]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b6f      	ldr	r3, [pc, #444]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a6e      	ldr	r2, [pc, #440]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fb9e 	bl	8001310 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fb9a 	bl	8001310 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e38d      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bea:	4b64      	ldr	r3, [pc, #400]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe4>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fb8a 	bl	8001310 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c00:	f7fe fb86 	bl	8001310 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e379      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c12:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x10c>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80ae 	beq.w	8002d8c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c30:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_RCC_OscConfig+0x162>
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	2b18      	cmp	r3, #24
 8002c4a:	d13a      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x1ce>
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d135      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c56:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_RCC_OscConfig+0x17a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e34b      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6e:	f7fe fb5b 	bl	8001328 <HAL_GetREVID>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d817      	bhi.n	8002cac <HAL_RCC_OscConfig+0x1b8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b40      	cmp	r3, #64	; 0x40
 8002c82:	d108      	bne.n	8002c96 <HAL_RCC_OscConfig+0x1a2>
 8002c84:	4b3d      	ldr	r3, [pc, #244]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c92:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c94:	e07a      	b.n	8002d8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	031b      	lsls	r3, r3, #12
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002caa:	e06f      	b.n	8002d8c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	061b      	lsls	r3, r3, #24
 8002cba:	4930      	ldr	r1, [pc, #192]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc0:	e064      	b.n	8002d8c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d045      	beq.n	8002d56 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cca:	4b2c      	ldr	r3, [pc, #176]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0219 	bic.w	r2, r3, #25
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4929      	ldr	r1, [pc, #164]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fb18 	bl	8001310 <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fb14 	bl	8001310 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e307      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf6:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d02:	f7fe fb11 	bl	8001328 <HAL_GetREVID>
 8002d06:	4602      	mov	r2, r0
 8002d08:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d817      	bhi.n	8002d40 <HAL_RCC_OscConfig+0x24c>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d108      	bne.n	8002d2a <HAL_RCC_OscConfig+0x236>
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d20:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d26:	6053      	str	r3, [r2, #4]
 8002d28:	e030      	b.n	8002d8c <HAL_RCC_OscConfig+0x298>
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	031b      	lsls	r3, r3, #12
 8002d38:	4910      	ldr	r1, [pc, #64]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
 8002d3e:	e025      	b.n	8002d8c <HAL_RCC_OscConfig+0x298>
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	061b      	lsls	r3, r3, #24
 8002d4e:	490b      	ldr	r1, [pc, #44]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]
 8002d54:	e01a      	b.n	8002d8c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <HAL_RCC_OscConfig+0x288>)
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fad5 	bl	8001310 <HAL_GetTick>
 8002d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fad1 	bl	8001310 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d903      	bls.n	8002d80 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e2c4      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
 8002d7c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d80:	4ba4      	ldr	r3, [pc, #656]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0310 	and.w	r3, r3, #16
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80a9 	beq.w	8002eec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9a:	4b9e      	ldr	r3, [pc, #632]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002da2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002da4:	4b9b      	ldr	r3, [pc, #620]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d007      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x2cc>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b18      	cmp	r3, #24
 8002db4:	d13a      	bne.n	8002e2c <HAL_RCC_OscConfig+0x338>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d135      	bne.n	8002e2c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dc0:	4b94      	ldr	r3, [pc, #592]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x2e4>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e296      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002dd8:	f7fe faa6 	bl	8001328 <HAL_GetREVID>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	f241 0303 	movw	r3, #4099	; 0x1003
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d817      	bhi.n	8002e16 <HAL_RCC_OscConfig+0x322>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d108      	bne.n	8002e00 <HAL_RCC_OscConfig+0x30c>
 8002dee:	4b89      	ldr	r3, [pc, #548]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002df6:	4a87      	ldr	r2, [pc, #540]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dfe:	e075      	b.n	8002eec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e00:	4b84      	ldr	r3, [pc, #528]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	069b      	lsls	r3, r3, #26
 8002e0e:	4981      	ldr	r1, [pc, #516]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e14:	e06a      	b.n	8002eec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e16:	4b7f      	ldr	r3, [pc, #508]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	061b      	lsls	r3, r3, #24
 8002e24:	497b      	ldr	r1, [pc, #492]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e2a:	e05f      	b.n	8002eec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d042      	beq.n	8002eba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002e34:	4b77      	ldr	r3, [pc, #476]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a76      	ldr	r2, [pc, #472]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe fa66 	bl	8001310 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e48:	f7fe fa62 	bl	8001310 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e255      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e5a:	4b6e      	ldr	r3, [pc, #440]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e66:	f7fe fa5f 	bl	8001328 <HAL_GetREVID>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d817      	bhi.n	8002ea4 <HAL_RCC_OscConfig+0x3b0>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d108      	bne.n	8002e8e <HAL_RCC_OscConfig+0x39a>
 8002e7c:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e84:	4a63      	ldr	r2, [pc, #396]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e8a:	6053      	str	r3, [r2, #4]
 8002e8c:	e02e      	b.n	8002eec <HAL_RCC_OscConfig+0x3f8>
 8002e8e:	4b61      	ldr	r3, [pc, #388]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	495d      	ldr	r1, [pc, #372]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
 8002ea2:	e023      	b.n	8002eec <HAL_RCC_OscConfig+0x3f8>
 8002ea4:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	4958      	ldr	r1, [pc, #352]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
 8002eb8:	e018      	b.n	8002eec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002eba:	4b56      	ldr	r3, [pc, #344]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a55      	ldr	r2, [pc, #340]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7fe fa23 	bl	8001310 <HAL_GetTick>
 8002eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002ece:	f7fe fa1f 	bl	8001310 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e212      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d036      	beq.n	8002f66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d019      	beq.n	8002f34 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f00:	4b44      	ldr	r3, [pc, #272]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f04:	4a43      	ldr	r2, [pc, #268]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0c:	f7fe fa00 	bl	8001310 <HAL_GetTick>
 8002f10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f14:	f7fe f9fc 	bl	8001310 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e1ef      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x420>
 8002f32:	e018      	b.n	8002f66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f34:	4b37      	ldr	r3, [pc, #220]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	4a36      	ldr	r2, [pc, #216]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f40:	f7fe f9e6 	bl	8001310 <HAL_GetTick>
 8002f44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f48:	f7fe f9e2 	bl	8001310 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1d5      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d036      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d019      	beq.n	8002fae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f86:	f7fe f9c3 	bl	8001310 <HAL_GetTick>
 8002f8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002f8e:	f7fe f9bf 	bl	8001310 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e1b2      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x49a>
 8002fac:	e018      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a18      	ldr	r2, [pc, #96]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002fb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fba:	f7fe f9a9 	bl	8001310 <HAL_GetTick>
 8002fbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002fc2:	f7fe f9a5 	bl	8001310 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e198      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002fd4:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <HAL_RCC_OscConfig+0x520>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f0      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8085 	beq.w	80030f8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <HAL_RCC_OscConfig+0x524>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_RCC_OscConfig+0x524>)
 8002ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ffa:	f7fe f989 	bl	8001310 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003000:	e00c      	b.n	800301c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003002:	f7fe f985 	bl	8001310 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b64      	cmp	r3, #100	; 0x64
 800300e:	d905      	bls.n	800301c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e178      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
 8003014:	58024400 	.word	0x58024400
 8003018:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800301c:	4b96      	ldr	r3, [pc, #600]	; (8003278 <HAL_RCC_OscConfig+0x784>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ec      	beq.n	8003002 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d106      	bne.n	800303e <HAL_RCC_OscConfig+0x54a>
 8003030:	4b92      	ldr	r3, [pc, #584]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	4a91      	ldr	r2, [pc, #580]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	6713      	str	r3, [r2, #112]	; 0x70
 800303c:	e02d      	b.n	800309a <HAL_RCC_OscConfig+0x5a6>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10c      	bne.n	8003060 <HAL_RCC_OscConfig+0x56c>
 8003046:	4b8d      	ldr	r3, [pc, #564]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a8c      	ldr	r2, [pc, #560]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
 8003052:	4b8a      	ldr	r3, [pc, #552]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a89      	ldr	r2, [pc, #548]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003058:	f023 0304 	bic.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	e01c      	b.n	800309a <HAL_RCC_OscConfig+0x5a6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d10c      	bne.n	8003082 <HAL_RCC_OscConfig+0x58e>
 8003068:	4b84      	ldr	r3, [pc, #528]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a83      	ldr	r2, [pc, #524]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b81      	ldr	r3, [pc, #516]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a80      	ldr	r2, [pc, #512]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
 8003080:	e00b      	b.n	800309a <HAL_RCC_OscConfig+0x5a6>
 8003082:	4b7e      	ldr	r3, [pc, #504]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	4a7d      	ldr	r2, [pc, #500]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	6713      	str	r3, [r2, #112]	; 0x70
 800308e:	4b7b      	ldr	r3, [pc, #492]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003092:	4a7a      	ldr	r2, [pc, #488]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003094:	f023 0304 	bic.w	r3, r3, #4
 8003098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d015      	beq.n	80030ce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a2:	f7fe f935 	bl	8001310 <HAL_GetTick>
 80030a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a8:	e00a      	b.n	80030c0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030aa:	f7fe f931 	bl	8001310 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e122      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030c0:	4b6e      	ldr	r3, [pc, #440]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ee      	beq.n	80030aa <HAL_RCC_OscConfig+0x5b6>
 80030cc:	e014      	b.n	80030f8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ce:	f7fe f91f 	bl	8001310 <HAL_GetTick>
 80030d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030d4:	e00a      	b.n	80030ec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d6:	f7fe f91b 	bl	8001310 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e10c      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030ec:	4b63      	ldr	r3, [pc, #396]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ee      	bne.n	80030d6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 8101 	beq.w	8003304 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003102:	4b5e      	ldr	r3, [pc, #376]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800310a:	2b18      	cmp	r3, #24
 800310c:	f000 80bc 	beq.w	8003288 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	2b02      	cmp	r3, #2
 8003116:	f040 8095 	bne.w	8003244 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b58      	ldr	r3, [pc, #352]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a57      	ldr	r2, [pc, #348]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe f8f3 	bl	8001310 <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800312c:	e008      	b.n	8003140 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312e:	f7fe f8ef 	bl	8001310 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d901      	bls.n	8003140 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0e2      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003140:	4b4e      	ldr	r3, [pc, #312]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1f0      	bne.n	800312e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800314c:	4b4b      	ldr	r3, [pc, #300]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800314e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003150:	4b4b      	ldr	r3, [pc, #300]	; (8003280 <HAL_RCC_OscConfig+0x78c>)
 8003152:	4013      	ands	r3, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	430a      	orrs	r2, r1
 8003160:	4946      	ldr	r1, [pc, #280]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003162:	4313      	orrs	r3, r2
 8003164:	628b      	str	r3, [r1, #40]	; 0x28
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	3b01      	subs	r3, #1
 800316c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	3b01      	subs	r3, #1
 8003176:	025b      	lsls	r3, r3, #9
 8003178:	b29b      	uxth	r3, r3
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	3b01      	subs	r3, #1
 8003182:	041b      	lsls	r3, r3, #16
 8003184:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	3b01      	subs	r3, #1
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003196:	4939      	ldr	r1, [pc, #228]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003198:	4313      	orrs	r3, r2
 800319a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800319c:	4b37      	ldr	r3, [pc, #220]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4a36      	ldr	r2, [pc, #216]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031a2:	f023 0301 	bic.w	r3, r3, #1
 80031a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031a8:	4b34      	ldr	r3, [pc, #208]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ac:	4b35      	ldr	r3, [pc, #212]	; (8003284 <HAL_RCC_OscConfig+0x790>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80031b4:	00d2      	lsls	r2, r2, #3
 80031b6:	4931      	ldr	r1, [pc, #196]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80031bc:	4b2f      	ldr	r3, [pc, #188]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	f023 020c 	bic.w	r2, r3, #12
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	492c      	ldr	r1, [pc, #176]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031ce:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	f023 0202 	bic.w	r2, r3, #2
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4928      	ldr	r1, [pc, #160]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031e0:	4b26      	ldr	r3, [pc, #152]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	4a25      	ldr	r2, [pc, #148]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031ec:	4b23      	ldr	r3, [pc, #140]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a22      	ldr	r2, [pc, #136]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031f8:	4b20      	ldr	r3, [pc, #128]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4a1f      	ldr	r2, [pc, #124]	; (800327c <HAL_RCC_OscConfig+0x788>)
 80031fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321c:	f7fe f878 	bl	8001310 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe f874 	bl	8001310 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e067      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x730>
 8003242:	e05f      	b.n	8003304 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <HAL_RCC_OscConfig+0x788>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0c      	ldr	r2, [pc, #48]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800324a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe f85e 	bl	8001310 <HAL_GetTick>
 8003254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003258:	f7fe f85a 	bl	8001310 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e04d      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <HAL_RCC_OscConfig+0x788>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x764>
 8003276:	e045      	b.n	8003304 <HAL_RCC_OscConfig+0x810>
 8003278:	58024800 	.word	0x58024800
 800327c:	58024400 	.word	0x58024400
 8003280:	fffffc0c 	.word	0xfffffc0c
 8003284:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003288:	4b21      	ldr	r3, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x81c>)
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCC_OscConfig+0x81c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b01      	cmp	r3, #1
 800329a:	d031      	beq.n	8003300 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0203 	and.w	r2, r3, #3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d12a      	bne.n	8003300 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d122      	bne.n	8003300 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	0a5b      	lsrs	r3, r3, #9
 80032ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d108      	bne.n	8003300 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3730      	adds	r7, #48	; 0x30
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400

08003314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e19c      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b8a      	ldr	r3, [pc, #552]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d910      	bls.n	8003358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b87      	ldr	r3, [pc, #540]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 020f 	bic.w	r2, r3, #15
 800333e:	4985      	ldr	r1, [pc, #532]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003346:	4b83      	ldr	r3, [pc, #524]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d001      	beq.n	8003358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e184      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d010      	beq.n	8003386 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	4b7b      	ldr	r3, [pc, #492]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003370:	429a      	cmp	r2, r3
 8003372:	d908      	bls.n	8003386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003374:	4b78      	ldr	r3, [pc, #480]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	4975      	ldr	r1, [pc, #468]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003382:	4313      	orrs	r3, r2
 8003384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d010      	beq.n	80033b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	4b70      	ldr	r3, [pc, #448]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800339e:	429a      	cmp	r2, r3
 80033a0:	d908      	bls.n	80033b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	496a      	ldr	r1, [pc, #424]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d010      	beq.n	80033e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	4b64      	ldr	r3, [pc, #400]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d908      	bls.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	495e      	ldr	r1, [pc, #376]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d908      	bls.n	8003410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033fe:	4b56      	ldr	r3, [pc, #344]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	4953      	ldr	r1, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800340c:	4313      	orrs	r3, r2
 800340e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4b4d      	ldr	r3, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	429a      	cmp	r2, r3
 800342a:	d908      	bls.n	800343e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f023 020f 	bic.w	r2, r3, #15
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4947      	ldr	r1, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800343a:	4313      	orrs	r3, r2
 800343c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d055      	beq.n	80034f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800344a:	4b43      	ldr	r3, [pc, #268]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4940      	ldr	r1, [pc, #256]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003458:	4313      	orrs	r3, r2
 800345a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b02      	cmp	r3, #2
 8003462:	d107      	bne.n	8003474 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003464:	4b3c      	ldr	r3, [pc, #240]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d121      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0f6      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d107      	bne.n	800348c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800347c:	4b36      	ldr	r3, [pc, #216]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d115      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0ea      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003494:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d109      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0de      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034a4:	4b2c      	ldr	r3, [pc, #176]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d6      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034b4:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4925      	ldr	r1, [pc, #148]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fd ff23 	bl	8001310 <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ce:	f7fd ff1f 	bl	8001310 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0be      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d1eb      	bne.n	80034ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	429a      	cmp	r2, r3
 8003510:	d208      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f023 020f 	bic.w	r2, r3, #15
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x244>)
 8003520:	4313      	orrs	r3, r2
 8003522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d214      	bcs.n	800355c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 020f 	bic.w	r2, r3, #15
 800353a:	4906      	ldr	r1, [pc, #24]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b04      	ldr	r3, [pc, #16]	; (8003554 <HAL_RCC_ClockConfig+0x240>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d005      	beq.n	800355c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e086      	b.n	8003662 <HAL_RCC_ClockConfig+0x34e>
 8003554:	52002000 	.word	0x52002000
 8003558:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0304 	and.w	r3, r3, #4
 8003564:	2b00      	cmp	r3, #0
 8003566:	d010      	beq.n	800358a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003574:	429a      	cmp	r2, r3
 8003576:	d208      	bcs.n	800358a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003578:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	4939      	ldr	r1, [pc, #228]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 8003586:	4313      	orrs	r3, r2
 8003588:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d010      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	4b34      	ldr	r3, [pc, #208]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d208      	bcs.n	80035b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035a6:	4b31      	ldr	r3, [pc, #196]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	492e      	ldr	r1, [pc, #184]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d208      	bcs.n	80035e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	4922      	ldr	r1, [pc, #136]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69da      	ldr	r2, [r3, #28]
 80035f6:	4b1d      	ldr	r3, [pc, #116]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035fe:	429a      	cmp	r2, r3
 8003600:	d208      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003602:	4b1a      	ldr	r3, [pc, #104]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	4917      	ldr	r1, [pc, #92]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 8003610:	4313      	orrs	r3, r2
 8003612:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003614:	f000 f834 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 8003618:	4601      	mov	r1, r0
 800361a:	4b14      	ldr	r3, [pc, #80]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	4a12      	ldr	r2, [pc, #72]	; (8003670 <HAL_RCC_ClockConfig+0x35c>)
 8003626:	5cd3      	ldrb	r3, [r2, r3]
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	fa21 f303 	lsr.w	r3, r1, r3
 8003630:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <HAL_RCC_ClockConfig+0x358>)
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <HAL_RCC_ClockConfig+0x35c>)
 800363c:	5cd3      	ldrb	r3, [r2, r3]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_RCC_ClockConfig+0x360>)
 800364a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800364c:	4a0a      	ldr	r2, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x364>)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x368>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fd fe10 	bl	800127c <HAL_InitTick>
 800365c:	4603      	mov	r3, r0
 800365e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	58024400 	.word	0x58024400
 8003670:	080074d0 	.word	0x080074d0
 8003674:	24000004 	.word	0x24000004
 8003678:	24000000 	.word	0x24000000
 800367c:	24000008 	.word	0x24000008

08003680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003686:	4baf      	ldr	r3, [pc, #700]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800368e:	2b18      	cmp	r3, #24
 8003690:	f200 814e 	bhi.w	8003930 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003694:	a201      	add	r2, pc, #4	; (adr r2, 800369c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369a:	bf00      	nop
 800369c:	08003701 	.word	0x08003701
 80036a0:	08003931 	.word	0x08003931
 80036a4:	08003931 	.word	0x08003931
 80036a8:	08003931 	.word	0x08003931
 80036ac:	08003931 	.word	0x08003931
 80036b0:	08003931 	.word	0x08003931
 80036b4:	08003931 	.word	0x08003931
 80036b8:	08003931 	.word	0x08003931
 80036bc:	08003727 	.word	0x08003727
 80036c0:	08003931 	.word	0x08003931
 80036c4:	08003931 	.word	0x08003931
 80036c8:	08003931 	.word	0x08003931
 80036cc:	08003931 	.word	0x08003931
 80036d0:	08003931 	.word	0x08003931
 80036d4:	08003931 	.word	0x08003931
 80036d8:	08003931 	.word	0x08003931
 80036dc:	0800372d 	.word	0x0800372d
 80036e0:	08003931 	.word	0x08003931
 80036e4:	08003931 	.word	0x08003931
 80036e8:	08003931 	.word	0x08003931
 80036ec:	08003931 	.word	0x08003931
 80036f0:	08003931 	.word	0x08003931
 80036f4:	08003931 	.word	0x08003931
 80036f8:	08003931 	.word	0x08003931
 80036fc:	08003733 	.word	0x08003733
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003700:	4b90      	ldr	r3, [pc, #576]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d009      	beq.n	8003720 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800370c:	4b8d      	ldr	r3, [pc, #564]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	4a8c      	ldr	r2, [pc, #560]	; (8003948 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
 800371c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800371e:	e10a      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003720:	4b89      	ldr	r3, [pc, #548]	; (8003948 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003722:	61bb      	str	r3, [r7, #24]
    break;
 8003724:	e107      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003726:	4b89      	ldr	r3, [pc, #548]	; (800394c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003728:	61bb      	str	r3, [r7, #24]
    break;
 800372a:	e104      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800372c:	4b88      	ldr	r3, [pc, #544]	; (8003950 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800372e:	61bb      	str	r3, [r7, #24]
    break;
 8003730:	e101      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003732:	4b84      	ldr	r3, [pc, #528]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800373c:	4b81      	ldr	r3, [pc, #516]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800373e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003740:	091b      	lsrs	r3, r3, #4
 8003742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003746:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003748:	4b7e      	ldr	r3, [pc, #504]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003752:	4b7c      	ldr	r3, [pc, #496]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	08db      	lsrs	r3, r3, #3
 8003758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80da 	beq.w	800392a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d05a      	beq.n	8003832 <HAL_RCC_GetSysClockFreq+0x1b2>
 800377c:	2b01      	cmp	r3, #1
 800377e:	d302      	bcc.n	8003786 <HAL_RCC_GetSysClockFreq+0x106>
 8003780:	2b02      	cmp	r3, #2
 8003782:	d078      	beq.n	8003876 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003784:	e099      	b.n	80038ba <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003786:	4b6f      	ldr	r3, [pc, #444]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d02d      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003792:	4b6c      	ldr	r3, [pc, #432]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	4a6a      	ldr	r2, [pc, #424]	; (8003948 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	ee07 3a90 	vmov	s15, r3
 80037b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037bc:	4b61      	ldr	r3, [pc, #388]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80037d0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003954 <HAL_RCC_GetSysClockFreq+0x2d4>
 80037d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80037ec:	e087      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003958 <HAL_RCC_GetSysClockFreq+0x2d8>
 80037fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003800:	4b50      	ldr	r3, [pc, #320]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003808:	ee07 3a90 	vmov	s15, r3
 800380c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003810:	ed97 6a02 	vldr	s12, [r7, #8]
 8003814:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003954 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003830:	e065      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	ee07 3a90 	vmov	s15, r3
 8003838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800395c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003844:	4b3f      	ldr	r3, [pc, #252]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003854:	ed97 6a02 	vldr	s12, [r7, #8]
 8003858:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003954 <HAL_RCC_GetSysClockFreq+0x2d4>
 800385c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003870:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003874:	e043      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	ee07 3a90 	vmov	s15, r3
 800387c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003880:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003960 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003888:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003898:	ed97 6a02 	vldr	s12, [r7, #8]
 800389c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003954 <HAL_RCC_GetSysClockFreq+0x2d4>
 80038a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038b8:	e021      	b.n	80038fe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	ee07 3a90 	vmov	s15, r3
 80038c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800395c <HAL_RCC_GetSysClockFreq+0x2dc>
 80038c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	ee07 3a90 	vmov	s15, r3
 80038d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80038e0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003954 <HAL_RCC_GetSysClockFreq+0x2d4>
 80038e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038fc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80038fe:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	0a5b      	lsrs	r3, r3, #9
 8003904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003908:	3301      	adds	r3, #1
 800390a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003916:	edd7 6a07 	vldr	s13, [r7, #28]
 800391a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003922:	ee17 3a90 	vmov	r3, s15
 8003926:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003928:	e005      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
    break;
 800392e:	e002      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003932:	61bb      	str	r3, [r7, #24]
    break;
 8003934:	bf00      	nop
  }

  return sysclockfreq;
 8003936:	69bb      	ldr	r3, [r7, #24]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3724      	adds	r7, #36	; 0x24
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	58024400 	.word	0x58024400
 8003948:	03d09000 	.word	0x03d09000
 800394c:	003d0900 	.word	0x003d0900
 8003950:	017d7840 	.word	0x017d7840
 8003954:	46000000 	.word	0x46000000
 8003958:	4c742400 	.word	0x4c742400
 800395c:	4a742400 	.word	0x4a742400
 8003960:	4bbebc20 	.word	0x4bbebc20

08003964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800396a:	f7ff fe89 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 800396e:	4601      	mov	r1, r0
 8003970:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	4a0f      	ldr	r2, [pc, #60]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800397c:	5cd3      	ldrb	r3, [r2, r3]
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	fa21 f303 	lsr.w	r3, r1, r3
 8003986:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003992:	5cd3      	ldrb	r3, [r2, r3]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	fa22 f303 	lsr.w	r3, r2, r3
 800399e:	4a07      	ldr	r2, [pc, #28]	; (80039bc <HAL_RCC_GetHCLKFreq+0x58>)
 80039a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039a2:	4a07      	ldr	r2, [pc, #28]	; (80039c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <HAL_RCC_GetHCLKFreq+0x58>)
 80039aa:	681b      	ldr	r3, [r3, #0]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	58024400 	.word	0x58024400
 80039b8:	080074d0 	.word	0x080074d0
 80039bc:	24000004 	.word	0x24000004
 80039c0:	24000000 	.word	0x24000000

080039c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039c8:	f7ff ffcc 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039cc:	4601      	mov	r1, r0
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80039da:	5cd3      	ldrb	r3, [r2, r3]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	58024400 	.word	0x58024400
 80039ec:	080074d0 	.word	0x080074d0

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039f4:	f7ff ffb6 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 80039f8:	4601      	mov	r1, r0
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a06:	5cd3      	ldrb	r3, [r2, r3]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	58024400 	.word	0x58024400
 8003a18:	080074d0 	.word	0x080074d0

08003a1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a24:	2300      	movs	r3, #0
 8003a26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a28:	2300      	movs	r3, #0
 8003a2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03d      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a40:	d013      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a46:	d802      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003a4c:	e01f      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a52:	d013      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003a54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a58:	d01c      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003a5a:	e018      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4baf      	ldr	r3, [pc, #700]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4aae      	ldr	r2, [pc, #696]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a68:	e015      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2102      	movs	r1, #2
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 f96f 	bl	8004d54 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a7a:	e00c      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	2102      	movs	r1, #2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 fa18 	bl	8004eb8 <RCCEx_PLL3_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a8c:	e003      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
      break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a9c:	4b9f      	ldr	r3, [pc, #636]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa8:	499c      	ldr	r1, [pc, #624]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	650b      	str	r3, [r1, #80]	; 0x50
 8003aae:	e001      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d03d      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d826      	bhi.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003ac8:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ace:	bf00      	nop
 8003ad0:	08003ae5 	.word	0x08003ae5
 8003ad4:	08003af3 	.word	0x08003af3
 8003ad8:	08003b05 	.word	0x08003b05
 8003adc:	08003b1d 	.word	0x08003b1d
 8003ae0:	08003b1d 	.word	0x08003b1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae4:	4b8d      	ldr	r3, [pc, #564]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	4a8c      	ldr	r2, [pc, #560]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003af0:	e015      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 f92b 	bl	8004d54 <RCCEx_PLL2_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b02:	e00c      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f9d4 	bl	8004eb8 <RCCEx_PLL3_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003b14:	e003      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
      break;
 8003b1a:	e000      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b24:	4b7d      	ldr	r3, [pc, #500]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	f023 0207 	bic.w	r2, r3, #7
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	497a      	ldr	r1, [pc, #488]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	650b      	str	r3, [r1, #80]	; 0x50
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d03e      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d01c      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d804      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b58:	2b40      	cmp	r3, #64	; 0x40
 8003b5a:	d00d      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003b5c:	e01e      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b60:	d01f      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b66:	d01e      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003b68:	e018      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6a:	4b6c      	ldr	r3, [pc, #432]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	4a6b      	ldr	r2, [pc, #428]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b76:	e017      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 f8e8 	bl	8004d54 <RCCEx_PLL2_Config>
 8003b84:	4603      	mov	r3, r0
 8003b86:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b88:	e00e      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3324      	adds	r3, #36	; 0x24
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 f991 	bl	8004eb8 <RCCEx_PLL3_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b9a:	e005      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba0:	e002      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e000      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba8:	7dfb      	ldrb	r3, [r7, #23]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003bae:	4b5b      	ldr	r3, [pc, #364]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	4958      	ldr	r1, [pc, #352]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	650b      	str	r3, [r1, #80]	; 0x50
 8003bc0:	e001      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d044      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bdc:	d01f      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be2:	d805      	bhi.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bec:	d00e      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003bee:	e01f      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003bf0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bf4:	d01f      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003bf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bfa:	d01e      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003bfc:	e018      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfe:	4b47      	ldr	r3, [pc, #284]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	4a46      	ldr	r2, [pc, #280]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c0a:	e017      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3304      	adds	r3, #4
 8003c10:	2100      	movs	r1, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f89e 	bl	8004d54 <RCCEx_PLL2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c1c:	e00e      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3324      	adds	r3, #36	; 0x24
 8003c22:	2100      	movs	r1, #0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 f947 	bl	8004eb8 <RCCEx_PLL3_Config>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c2e:	e005      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
      break;
 8003c34:	e002      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003c36:	bf00      	nop
 8003c38:	e000      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c46:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c50:	4932      	ldr	r1, [pc, #200]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	658b      	str	r3, [r1, #88]	; 0x58
 8003c56:	e001      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d044      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c72:	d01f      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c78:	d805      	bhi.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003c7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c82:	d00e      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003c84:	e01f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003c86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c8a:	d01f      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003c8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c90:	d01e      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	4a20      	ldr	r2, [pc, #128]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ca0:	e017      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f001 f853 	bl	8004d54 <RCCEx_PLL2_Config>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003cb2:	e00e      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3324      	adds	r3, #36	; 0x24
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 f8fc 	bl	8004eb8 <RCCEx_PLL3_Config>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cc4:	e005      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003cca:	e002      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003ccc:	bf00      	nop
 8003cce:	e000      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cd8:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ce6:	490d      	ldr	r1, [pc, #52]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	658b      	str	r3, [r1, #88]	; 0x58
 8003cec:	e001      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d035      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003d06:	2b10      	cmp	r3, #16
 8003d08:	d802      	bhi.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01b      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003d0e:	e017      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	d00c      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d018      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003d18:	e012      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003d1a:	bf00      	nop
 8003d1c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4baf      	ldr	r3, [pc, #700]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4aae      	ldr	r2, [pc, #696]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d2c:	e00e      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	2102      	movs	r1, #2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f001 f80d 	bl	8004d54 <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d3e:	e005      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	75fb      	strb	r3, [r7, #23]
      break;
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d52:	4ba3      	ldr	r3, [pc, #652]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5e:	49a0      	ldr	r1, [pc, #640]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d64:	e001      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d042      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7e:	d01f      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d84:	d805      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8e:	d00e      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003d90:	e01f      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d96:	d01f      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9c:	d01e      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003d9e:	e018      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da0:	4b8f      	ldr	r3, [pc, #572]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a8e      	ldr	r2, [pc, #568]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dac:	e017      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 ffcd 	bl	8004d54 <RCCEx_PLL2_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dbe:	e00e      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3324      	adds	r3, #36	; 0x24
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f001 f876 	bl	8004eb8 <RCCEx_PLL3_Config>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dd0:	e005      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd6:	e002      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d109      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003de4:	4b7e      	ldr	r3, [pc, #504]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df0:	497b      	ldr	r1, [pc, #492]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	650b      	str	r3, [r1, #80]	; 0x50
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d042      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e10:	d01b      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e16:	d805      	bhi.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d022      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e22:	e01b      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e28:	d01d      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e2e:	d01c      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003e30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e34:	d01b      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003e36:	e011      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 ff88 	bl	8004d54 <RCCEx_PLL2_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e48:	e012      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3324      	adds	r3, #36	; 0x24
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 f831 	bl	8004eb8 <RCCEx_PLL3_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e5a:	e009      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e60:	e006      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003e62:	bf00      	nop
 8003e64:	e004      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003e66:	bf00      	nop
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e000      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d109      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e76:	4b5a      	ldr	r3, [pc, #360]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e82:	4957      	ldr	r1, [pc, #348]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	650b      	str	r3, [r1, #80]	; 0x50
 8003e88:	e001      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d044      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea4:	d01b      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eaa:	d805      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d022      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003eb6:	e01b      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ebc:	d01d      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ec2:	d01c      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003ec4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ec8:	d01b      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003eca:	e011      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 ff3e 	bl	8004d54 <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003edc:	e012      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3324      	adds	r3, #36	; 0x24
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 ffe7 	bl	8004eb8 <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003eee:	e009      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	e006      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e004      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003efa:	bf00      	nop
 8003efc:	e002      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10a      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f0a:	4b35      	ldr	r3, [pc, #212]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f18:	4931      	ldr	r1, [pc, #196]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f1e:	e001      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d02d      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f38:	d005      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3e:	d009      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d013      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003f44:	e00f      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	4a25      	ldr	r2, [pc, #148]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f52:	e00c      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	2101      	movs	r1, #1
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fefa 	bl	8004d54 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003f64:	e003      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6a:	e000      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f74:	4b1a      	ldr	r3, [pc, #104]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f80:	4917      	ldr	r1, [pc, #92]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	650b      	str	r3, [r1, #80]	; 0x50
 8003f86:	e001      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d035      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d81b      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fe5 	.word	0x08003fe5
 8003fac:	08003fb9 	.word	0x08003fb9
 8003fb0:	08003fc7 	.word	0x08003fc7
 8003fb4:	08003fe5 	.word	0x08003fe5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb8:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003fc4:	e00f      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	2102      	movs	r1, #2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fec1 	bl	8004d54 <RCCEx_PLL2_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003fd6:	e006      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
      break;
 8003fdc:	e003      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003fde:	bf00      	nop
 8003fe0:	58024400 	.word	0x58024400
      break;
 8003fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003fec:	4bba      	ldr	r3, [pc, #744]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff0:	f023 0203 	bic.w	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	49b7      	ldr	r1, [pc, #732]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ffe:	e001      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 8086 	beq.w	800411e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004012:	4bb2      	ldr	r3, [pc, #712]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4ab1      	ldr	r2, [pc, #708]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800401e:	f7fd f977 	bl	8001310 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004024:	e009      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fd f973 	bl	8001310 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b64      	cmp	r3, #100	; 0x64
 8004032:	d902      	bls.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	75fb      	strb	r3, [r7, #23]
        break;
 8004038:	e005      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800403a:	4ba8      	ldr	r3, [pc, #672]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ef      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d166      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800404c:	4ba2      	ldr	r3, [pc, #648]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800404e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004056:	4053      	eors	r3, r2
 8004058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004060:	4b9d      	ldr	r3, [pc, #628]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004068:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800406a:	4b9b      	ldr	r3, [pc, #620]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	4a9a      	ldr	r2, [pc, #616]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004076:	4b98      	ldr	r3, [pc, #608]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407a:	4a97      	ldr	r2, [pc, #604]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004082:	4a95      	ldr	r2, [pc, #596]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800408e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004092:	d115      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd f93c 	bl	8001310 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800409a:	e00b      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd f938 	bl	8001310 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d902      	bls.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	75fb      	strb	r3, [r7, #23]
            break;
 80040b2:	e005      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040b4:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ed      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d126      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d4:	d10d      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80040d6:	4b80      	ldr	r3, [pc, #512]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040e4:	0919      	lsrs	r1, r3, #4
 80040e6:	4b7e      	ldr	r3, [pc, #504]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80040e8:	400b      	ands	r3, r1
 80040ea:	497b      	ldr	r1, [pc, #492]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	610b      	str	r3, [r1, #16]
 80040f0:	e005      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80040f2:	4b79      	ldr	r3, [pc, #484]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	4a78      	ldr	r2, [pc, #480]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80040fc:	6113      	str	r3, [r2, #16]
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410c:	4972      	ldr	r1, [pc, #456]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	670b      	str	r3, [r1, #112]	; 0x70
 8004112:	e004      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	75bb      	strb	r3, [r7, #22]
 8004118:	e001      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
 800411c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d07d      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412e:	2b28      	cmp	r3, #40	; 0x28
 8004130:	d866      	bhi.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004207 	.word	0x08004207
 800413c:	08004201 	.word	0x08004201
 8004140:	08004201 	.word	0x08004201
 8004144:	08004201 	.word	0x08004201
 8004148:	08004201 	.word	0x08004201
 800414c:	08004201 	.word	0x08004201
 8004150:	08004201 	.word	0x08004201
 8004154:	08004201 	.word	0x08004201
 8004158:	080041dd 	.word	0x080041dd
 800415c:	08004201 	.word	0x08004201
 8004160:	08004201 	.word	0x08004201
 8004164:	08004201 	.word	0x08004201
 8004168:	08004201 	.word	0x08004201
 800416c:	08004201 	.word	0x08004201
 8004170:	08004201 	.word	0x08004201
 8004174:	08004201 	.word	0x08004201
 8004178:	080041ef 	.word	0x080041ef
 800417c:	08004201 	.word	0x08004201
 8004180:	08004201 	.word	0x08004201
 8004184:	08004201 	.word	0x08004201
 8004188:	08004201 	.word	0x08004201
 800418c:	08004201 	.word	0x08004201
 8004190:	08004201 	.word	0x08004201
 8004194:	08004201 	.word	0x08004201
 8004198:	08004207 	.word	0x08004207
 800419c:	08004201 	.word	0x08004201
 80041a0:	08004201 	.word	0x08004201
 80041a4:	08004201 	.word	0x08004201
 80041a8:	08004201 	.word	0x08004201
 80041ac:	08004201 	.word	0x08004201
 80041b0:	08004201 	.word	0x08004201
 80041b4:	08004201 	.word	0x08004201
 80041b8:	08004207 	.word	0x08004207
 80041bc:	08004201 	.word	0x08004201
 80041c0:	08004201 	.word	0x08004201
 80041c4:	08004201 	.word	0x08004201
 80041c8:	08004201 	.word	0x08004201
 80041cc:	08004201 	.word	0x08004201
 80041d0:	08004201 	.word	0x08004201
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004207 	.word	0x08004207
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	2101      	movs	r1, #1
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 fdb6 	bl	8004d54 <RCCEx_PLL2_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80041ec:	e00c      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3324      	adds	r3, #36	; 0x24
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 fe5f 	bl	8004eb8 <RCCEx_PLL3_Config>
 80041fa:	4603      	mov	r3, r0
 80041fc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80041fe:	e003      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	75fb      	strb	r3, [r7, #23]
      break;
 8004204:	e000      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8004206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800420e:	4b32      	ldr	r3, [pc, #200]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800421a:	492f      	ldr	r1, [pc, #188]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800421c:	4313      	orrs	r3, r2
 800421e:	654b      	str	r3, [r1, #84]	; 0x54
 8004220:	e001      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d037      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004236:	2b05      	cmp	r3, #5
 8004238:	d820      	bhi.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800423a:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800423c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004240:	08004283 	.word	0x08004283
 8004244:	08004259 	.word	0x08004259
 8004248:	0800426b 	.word	0x0800426b
 800424c:	08004283 	.word	0x08004283
 8004250:	08004283 	.word	0x08004283
 8004254:	08004283 	.word	0x08004283
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3304      	adds	r3, #4
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fd78 	bl	8004d54 <RCCEx_PLL2_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004268:	e00c      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3324      	adds	r3, #36	; 0x24
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fe21 	bl	8004eb8 <RCCEx_PLL3_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800427a:	e003      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	75fb      	strb	r3, [r7, #23]
      break;
 8004280:	e000      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d109      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800428a:	4b13      	ldr	r3, [pc, #76]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	f023 0207 	bic.w	r2, r3, #7
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	4910      	ldr	r1, [pc, #64]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	654b      	str	r3, [r1, #84]	; 0x54
 800429c:	e001      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d040      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	2b05      	cmp	r3, #5
 80042b6:	d827      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	0800430f 	.word	0x0800430f
 80042c4:	080042e5 	.word	0x080042e5
 80042c8:	080042f7 	.word	0x080042f7
 80042cc:	0800430f 	.word	0x0800430f
 80042d0:	0800430f 	.word	0x0800430f
 80042d4:	0800430f 	.word	0x0800430f
 80042d8:	58024400 	.word	0x58024400
 80042dc:	58024800 	.word	0x58024800
 80042e0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fd32 	bl	8004d54 <RCCEx_PLL2_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80042f4:	e00c      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3324      	adds	r3, #36	; 0x24
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fddb 	bl	8004eb8 <RCCEx_PLL3_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004306:	e003      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	75fb      	strb	r3, [r7, #23]
      break;
 800430c:	e000      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800430e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10a      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004316:	4bb2      	ldr	r3, [pc, #712]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	f023 0207 	bic.w	r2, r3, #7
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	49ae      	ldr	r1, [pc, #696]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004326:	4313      	orrs	r3, r2
 8004328:	658b      	str	r3, [r1, #88]	; 0x58
 800432a:	e001      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d044      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004346:	d01b      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800434c:	d805      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d022      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004358:	e01b      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435e:	d01d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004364:	d01c      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004366:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800436a:	d01b      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800436c:	e011      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3304      	adds	r3, #4
 8004372:	2100      	movs	r1, #0
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fced 	bl	8004d54 <RCCEx_PLL2_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800437e:	e012      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3324      	adds	r3, #36	; 0x24
 8004384:	2102      	movs	r1, #2
 8004386:	4618      	mov	r0, r3
 8004388:	f000 fd96 	bl	8004eb8 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004390:	e009      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
      break;
 8004396:	e006      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004398:	bf00      	nop
 800439a:	e004      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800439c:	bf00      	nop
 800439e:	e002      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80043a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043ac:	4b8c      	ldr	r3, [pc, #560]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ba:	4989      	ldr	r1, [pc, #548]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	654b      	str	r3, [r1, #84]	; 0x54
 80043c0:	e001      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c2:	7dfb      	ldrb	r3, [r7, #23]
 80043c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d044      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043dc:	d01b      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80043de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e2:	d805      	bhi.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d022      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80043ee:	e01b      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80043f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f4:	d01d      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80043f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80043fa:	d01c      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80043fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004400:	d01b      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004402:	e011      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3304      	adds	r3, #4
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fca2 	bl	8004d54 <RCCEx_PLL2_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004414:	e012      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3324      	adds	r3, #36	; 0x24
 800441a:	2102      	movs	r1, #2
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fd4b 	bl	8004eb8 <RCCEx_PLL3_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004426:	e009      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	75fb      	strb	r3, [r7, #23]
      break;
 800442c:	e006      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800442e:	bf00      	nop
 8004430:	e004      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004432:	bf00      	nop
 8004434:	e002      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004436:	bf00      	nop
 8004438:	e000      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800443a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10a      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004442:	4b67      	ldr	r3, [pc, #412]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004450:	4963      	ldr	r1, [pc, #396]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	658b      	str	r3, [r1, #88]	; 0x58
 8004456:	e001      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b00      	cmp	r3, #0
 8004466:	d044      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800446e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004472:	d01b      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004478:	d805      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800447a:	2b00      	cmp	r3, #0
 800447c:	d022      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004482:	d00a      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004484:	e01b      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448a:	d01d      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800448c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004490:	d01c      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004492:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004496:	d01b      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004498:	e011      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3304      	adds	r3, #4
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fc57 	bl	8004d54 <RCCEx_PLL2_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80044aa:	e012      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3324      	adds	r3, #36	; 0x24
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fd00 	bl	8004eb8 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80044bc:	e009      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
      break;
 80044c2:	e006      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80044c4:	bf00      	nop
 80044c6:	e004      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80044c8:	bf00      	nop
 80044ca:	e002      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80044cc:	bf00      	nop
 80044ce:	e000      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80044d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10a      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80044d8:	4b41      	ldr	r3, [pc, #260]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e6:	493e      	ldr	r1, [pc, #248]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	658b      	str	r3, [r1, #88]	; 0x58
 80044ec:	e001      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004508:	d10a      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3324      	adds	r3, #36	; 0x24
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fcd1 	bl	8004eb8 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004520:	4b2f      	ldr	r3, [pc, #188]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800452e:	492c      	ldr	r1, [pc, #176]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004530:	4313      	orrs	r3, r2
 8004532:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454a:	d10a      	bne.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3324      	adds	r3, #36	; 0x24
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fcb0 	bl	8004eb8 <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004562:	4b1f      	ldr	r3, [pc, #124]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004570:	491b      	ldr	r1, [pc, #108]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d032      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d00d      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800458e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004592:	d016      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d111      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fbd8 	bl	8004d54 <RCCEx_PLL2_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80045a8:	e00c      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3324      	adds	r3, #36	; 0x24
 80045ae:	2102      	movs	r1, #2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fc81 	bl	8004eb8 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80045ba:	e003      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
      break;
 80045c0:	e000      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80045c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045c4:	7dfb      	ldrb	r3, [r7, #23]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80045d8:	4901      	ldr	r1, [pc, #4]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	658b      	str	r3, [r1, #88]	; 0x58
 80045de:	e003      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80045e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02f      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045fe:	d00c      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004604:	d015      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8004606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800460a:	d10f      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800460c:	4b79      	ldr	r3, [pc, #484]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	4a78      	ldr	r2, [pc, #480]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004616:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004618:	e00c      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3324      	adds	r3, #36	; 0x24
 800461e:	2101      	movs	r1, #1
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fc49 	bl	8004eb8 <RCCEx_PLL3_Config>
 8004626:	4603      	mov	r3, r0
 8004628:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800462a:	e003      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	75fb      	strb	r3, [r7, #23]
      break;
 8004630:	e000      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10a      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800463a:	4b6e      	ldr	r3, [pc, #440]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800463c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004648:	496a      	ldr	r1, [pc, #424]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800464a:	4313      	orrs	r3, r2
 800464c:	654b      	str	r3, [r1, #84]	; 0x54
 800464e:	e001      	b.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d029      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466c:	d007      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800466e:	e00f      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004670:	4b60      	ldr	r3, [pc, #384]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4a5f      	ldr	r2, [pc, #380]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800467c:	e00b      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	2102      	movs	r1, #2
 8004684:	4618      	mov	r0, r3
 8004686:	f000 fb65 	bl	8004d54 <RCCEx_PLL2_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800468e:	e002      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	75fb      	strb	r3, [r7, #23]
      break;
 8004694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800469c:	4b55      	ldr	r3, [pc, #340]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800469e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a8:	4952      	ldr	r1, [pc, #328]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046ae:	e001      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
 80046b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fbf6 	bl	8004eb8 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d02f      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ea:	d00c      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80046ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f0:	d802      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d011      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80046f6:	e00d      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80046f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046fc:	d00f      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80046fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004702:	d00e      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004704:	e006      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	4a3a      	ldr	r2, [pc, #232]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800470c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004710:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004712:	e007      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	75fb      	strb	r3, [r7, #23]
      break;
 8004718:	e004      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800471a:	bf00      	nop
 800471c:	e002      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800471e:	bf00      	nop
 8004720:	e000      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004722:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004724:	7dfb      	ldrb	r3, [r7, #23]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800472a:	4b32      	ldr	r3, [pc, #200]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004736:	492f      	ldr	r1, [pc, #188]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004738:	4313      	orrs	r3, r2
 800473a:	654b      	str	r3, [r1, #84]	; 0x54
 800473c:	e001      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473e:	7dfb      	ldrb	r3, [r7, #23]
 8004740:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800474e:	4b29      	ldr	r3, [pc, #164]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	4926      	ldr	r1, [pc, #152]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800475c:	4313      	orrs	r3, r2
 800475e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800476c:	4b21      	ldr	r3, [pc, #132]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800477a:	491e      	ldr	r1, [pc, #120]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800478e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004790:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004798:	4916      	ldr	r1, [pc, #88]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047aa:	4b12      	ldr	r3, [pc, #72]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047b4:	6113      	str	r3, [r2, #16]
 80047b6:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047b8:	691a      	ldr	r2, [r3, #16]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80047c0:	490c      	ldr	r1, [pc, #48]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	da08      	bge.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047da:	4906      	ldr	r1, [pc, #24]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80047e0:	7dbb      	ldrb	r3, [r7, #22]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	58024400 	.word	0x58024400

080047f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047fc:	f7ff f8b2 	bl	8003964 <HAL_RCC_GetHCLKFreq>
 8004800:	4601      	mov	r1, r0
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	091b      	lsrs	r3, r3, #4
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4a04      	ldr	r2, [pc, #16]	; (8004820 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800480e:	5cd3      	ldrb	r3, [r2, r3]
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004818:	4618      	mov	r0, r3
 800481a:	bd80      	pop	{r7, pc}
 800481c:	58024400 	.word	0x58024400
 8004820:	080074d0 	.word	0x080074d0

08004824 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004824:	b480      	push	{r7}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800482c:	4b9d      	ldr	r3, [pc, #628]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004836:	4b9b      	ldr	r3, [pc, #620]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	0b1b      	lsrs	r3, r3, #12
 800483c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004840:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004842:	4b98      	ldr	r3, [pc, #608]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004846:	091b      	lsrs	r3, r3, #4
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800484e:	4b95      	ldr	r3, [pc, #596]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004852:	08db      	lsrs	r3, r3, #3
 8004854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	fb02 f303 	mul.w	r3, r2, r3
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 810a 	beq.w	8004a86 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d05a      	beq.n	800492e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004878:	2b01      	cmp	r3, #1
 800487a:	d302      	bcc.n	8004882 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800487c:	2b02      	cmp	r3, #2
 800487e:	d078      	beq.n	8004972 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004880:	e099      	b.n	80049b6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004882:	4b88      	ldr	r3, [pc, #544]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d02d      	beq.n	80048ea <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800488e:	4b85      	ldr	r3, [pc, #532]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	08db      	lsrs	r3, r3, #3
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	4a83      	ldr	r2, [pc, #524]	; (8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800489a:	fa22 f303 	lsr.w	r3, r2, r3
 800489e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b8:	4b7a      	ldr	r3, [pc, #488]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c0:	ee07 3a90 	vmov	s15, r3
 80048c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80048cc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80048d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80048e8:	e087      	b.n	80049fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80048f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fc:	4b69      	ldr	r3, [pc, #420]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004910:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004914:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004918:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004920:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004928:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800492c:	e065      	b.n	80049fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	ee07 3a90 	vmov	s15, r3
 8004934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004938:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800493c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004940:	4b58      	ldr	r3, [pc, #352]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004948:	ee07 3a90 	vmov	s15, r3
 800494c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004950:	ed97 6a03 	vldr	s12, [r7, #12]
 8004954:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004958:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004964:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004970:	e043      	b.n	80049fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	ee07 3a90 	vmov	s15, r3
 8004978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004984:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	ee07 3a90 	vmov	s15, r3
 8004990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004994:	ed97 6a03 	vldr	s12, [r7, #12]
 8004998:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800499c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049b4:	e021      	b.n	80049fa <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80049c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c8:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d0:	ee07 3a90 	vmov	s15, r3
 80049d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80049dc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80049e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049f8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80049fa:	4b2a      	ldr	r3, [pc, #168]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	0a5b      	lsrs	r3, r3, #9
 8004a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a20:	ee17 2a90 	vmov	r2, s15
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004a28:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a32:	ee07 3a90 	vmov	s15, r3
 8004a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4e:	ee17 2a90 	vmov	r2, s15
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004a56:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	0e1b      	lsrs	r3, r3, #24
 8004a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a7c:	ee17 2a90 	vmov	r2, s15
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a84:	e008      	b.n	8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	3724      	adds	r7, #36	; 0x24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	03d09000 	.word	0x03d09000
 8004aac:	46000000 	.word	0x46000000
 8004ab0:	4c742400 	.word	0x4c742400
 8004ab4:	4a742400 	.word	0x4a742400
 8004ab8:	4bbebc20 	.word	0x4bbebc20

08004abc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ac4:	4b9d      	ldr	r3, [pc, #628]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ace:	4b9b      	ldr	r3, [pc, #620]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	0d1b      	lsrs	r3, r3, #20
 8004ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ada:	4b98      	ldr	r3, [pc, #608]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004ae6:	4b95      	ldr	r3, [pc, #596]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	08db      	lsrs	r3, r3, #3
 8004aec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 810a 	beq.w	8004d1e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d05a      	beq.n	8004bc6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d302      	bcc.n	8004b1a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d078      	beq.n	8004c0a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004b18:	e099      	b.n	8004c4e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b1a:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d02d      	beq.n	8004b82 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b26:	4b85      	ldr	r3, [pc, #532]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	08db      	lsrs	r3, r3, #3
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	4a83      	ldr	r2, [pc, #524]	; (8004d40 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b50:	4b7a      	ldr	r3, [pc, #488]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b60:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b64:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004b68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b80:	e087      	b.n	8004c92 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	ee07 3a90 	vmov	s15, r3
 8004b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b94:	4b69      	ldr	r3, [pc, #420]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bc4:	e065      	b.n	8004c92 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd8:	4b58      	ldr	r3, [pc, #352]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c08:	e043      	b.n	8004c92 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	ee07 3a90 	vmov	s15, r3
 8004c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1c:	4b47      	ldr	r3, [pc, #284]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c4c:	e021      	b.n	8004c92 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c58:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c60:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c70:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c90:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004c92:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	0a5b      	lsrs	r3, r3, #9
 8004c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb8:	ee17 2a90 	vmov	r2, s15
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004cc0:	4b1e      	ldr	r3, [pc, #120]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce6:	ee17 2a90 	vmov	r2, s15
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	0e1b      	lsrs	r3, r3, #24
 8004cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf8:	ee07 3a90 	vmov	s15, r3
 8004cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d14:	ee17 2a90 	vmov	r2, s15
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d1c:	e008      	b.n	8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	bf00      	nop
 8004d32:	3724      	adds	r7, #36	; 0x24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	03d09000 	.word	0x03d09000
 8004d44:	46000000 	.word	0x46000000
 8004d48:	4c742400 	.word	0x4c742400
 8004d4c:	4a742400 	.word	0x4a742400
 8004d50:	4bbebc20 	.word	0x4bbebc20

08004d54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d62:	4b53      	ldr	r3, [pc, #332]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b03      	cmp	r3, #3
 8004d6c:	d101      	bne.n	8004d72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e099      	b.n	8004ea6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d72:	4b4f      	ldr	r3, [pc, #316]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4e      	ldr	r2, [pc, #312]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7e:	f7fc fac7 	bl	8001310 <HAL_GetTick>
 8004d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004d86:	f7fc fac3 	bl	8001310 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e086      	b.n	8004ea6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d98:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004da4:	4b42      	ldr	r3, [pc, #264]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	493f      	ldr	r1, [pc, #252]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	628b      	str	r3, [r1, #40]	; 0x28
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	025b      	lsls	r3, r3, #9
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	3b01      	subs	r3, #1
 8004de2:	061b      	lsls	r3, r3, #24
 8004de4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004de8:	4931      	ldr	r1, [pc, #196]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dee:	4b30      	ldr	r3, [pc, #192]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	492d      	ldr	r1, [pc, #180]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e00:	4b2b      	ldr	r3, [pc, #172]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	f023 0220 	bic.w	r2, r3, #32
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	4928      	ldr	r1, [pc, #160]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e12:	4b27      	ldr	r3, [pc, #156]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	f023 0310 	bic.w	r3, r3, #16
 8004e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e1e:	4b24      	ldr	r3, [pc, #144]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e22:	4b24      	ldr	r3, [pc, #144]	; (8004eb4 <RCCEx_PLL2_Config+0x160>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	69d2      	ldr	r2, [r2, #28]
 8004e2a:	00d2      	lsls	r2, r2, #3
 8004e2c:	4920      	ldr	r1, [pc, #128]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e32:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e38:	f043 0310 	orr.w	r3, r3, #16
 8004e3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e44:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4a19      	ldr	r2, [pc, #100]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e50:	e00f      	b.n	8004e72 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d106      	bne.n	8004e66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e58:	4b15      	ldr	r3, [pc, #84]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e64:	e005      	b.n	8004e72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e66:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6a:	4a11      	ldr	r2, [pc, #68]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e72:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a0e      	ldr	r2, [pc, #56]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fc fa47 	bl	8001310 <HAL_GetTick>
 8004e82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e84:	e008      	b.n	8004e98 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e86:	f7fc fa43 	bl	8001310 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e006      	b.n	8004ea6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e98:	4b05      	ldr	r3, [pc, #20]	; (8004eb0 <RCCEx_PLL2_Config+0x15c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	ffff0007 	.word	0xffff0007

08004eb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ec6:	4b53      	ldr	r3, [pc, #332]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d101      	bne.n	8004ed6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e099      	b.n	800500a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ed6:	4b4f      	ldr	r3, [pc, #316]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a4e      	ldr	r2, [pc, #312]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee2:	f7fc fa15 	bl	8001310 <HAL_GetTick>
 8004ee6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ee8:	e008      	b.n	8004efc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004eea:	f7fc fa11 	bl	8001310 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e086      	b.n	800500a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004efc:	4b45      	ldr	r3, [pc, #276]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f08:	4b42      	ldr	r3, [pc, #264]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	051b      	lsls	r3, r3, #20
 8004f16:	493f      	ldr	r1, [pc, #252]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	628b      	str	r3, [r1, #40]	; 0x28
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	025b      	lsls	r3, r3, #9
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	431a      	orrs	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	041b      	lsls	r3, r3, #16
 8004f3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	061b      	lsls	r3, r3, #24
 8004f48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f4c:	4931      	ldr	r1, [pc, #196]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f52:	4b30      	ldr	r3, [pc, #192]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	492d      	ldr	r1, [pc, #180]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f64:	4b2b      	ldr	r3, [pc, #172]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	4928      	ldr	r1, [pc, #160]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f76:	4b27      	ldr	r3, [pc, #156]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	4a26      	ldr	r2, [pc, #152]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f82:	4b24      	ldr	r3, [pc, #144]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f86:	4b24      	ldr	r3, [pc, #144]	; (8005018 <RCCEx_PLL3_Config+0x160>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	69d2      	ldr	r2, [r2, #28]
 8004f8e:	00d2      	lsls	r2, r2, #3
 8004f90:	4920      	ldr	r1, [pc, #128]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4a19      	ldr	r2, [pc, #100]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004fae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fb4:	e00f      	b.n	8004fd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fbc:	4b15      	ldr	r3, [pc, #84]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	4a14      	ldr	r2, [pc, #80]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004fc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fc8:	e005      	b.n	8004fd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	4a11      	ldr	r2, [pc, #68]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fc f995 	bl	8001310 <HAL_GetTick>
 8004fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fe8:	e008      	b.n	8004ffc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fea:	f7fc f991 	bl	8001310 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e006      	b.n	800500a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ffc:	4b05      	ldr	r3, [pc, #20]	; (8005014 <RCCEx_PLL3_Config+0x15c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	58024400 	.word	0x58024400
 8005018:	ffff0007 	.word	0xffff0007

0800501c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e042      	b.n	80050b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005034:	2b00      	cmp	r3, #0
 8005036:	d106      	bne.n	8005046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7fb ff71 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	; 0x24
 800504a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f992 	bl	8005388 <UART_SetConfig>
 8005064:	4603      	mov	r3, r0
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e022      	b.n	80050b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 ff36 	bl	8005ee8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800508a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800509a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 ffbd 	bl	800602c <UART_CheckIdleState>
 80050b2:	4603      	mov	r3, r0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	4613      	mov	r3, r2
 80050ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	f040 8083 	bne.w	80051de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_UART_Transmit+0x28>
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e07b      	b.n	80051e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_Transmit+0x3a>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e074      	b.n	80051e0 <HAL_UART_Transmit+0x124>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2221      	movs	r2, #33	; 0x21
 800510a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800510e:	f7fc f8ff 	bl	8001310 <HAL_GetTick>
 8005112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	88fa      	ldrh	r2, [r7, #6]
 8005118:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512c:	d108      	bne.n	8005140 <HAL_UART_Transmit+0x84>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	61bb      	str	r3, [r7, #24]
 800513e:	e003      	b.n	8005148 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005144:	2300      	movs	r3, #0
 8005146:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005150:	e02c      	b.n	80051ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2200      	movs	r2, #0
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 ffad 	bl	80060bc <UART_WaitOnFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e039      	b.n	80051e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005180:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	3302      	adds	r3, #2
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	e007      	b.n	800519a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	781a      	ldrb	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1cc      	bne.n	8005152 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2200      	movs	r2, #0
 80051c0:	2140      	movs	r1, #64	; 0x40
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 ff7a 	bl	80060bc <UART_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e006      	b.n	80051e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
  }
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08a      	sub	sp, #40	; 0x28
 80051ec:	af02      	add	r7, sp, #8
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	603b      	str	r3, [r7, #0]
 80051f4:	4613      	mov	r3, r2
 80051f6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fe:	2b20      	cmp	r3, #32
 8005200:	f040 80bd 	bne.w	800537e <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_UART_Receive+0x28>
 800520a:	88fb      	ldrh	r3, [r7, #6]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0b5      	b.n	8005380 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_UART_Receive+0x3a>
 800521e:	2302      	movs	r3, #2
 8005220:	e0ae      	b.n	8005380 <HAL_UART_Receive+0x198>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2222      	movs	r2, #34	; 0x22
 8005236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800523a:	f7fc f869 	bl	8001310 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	88fa      	ldrh	r2, [r7, #6]
 8005244:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005258:	d10e      	bne.n	8005278 <HAL_UART_Receive+0x90>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <HAL_UART_Receive+0x86>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005268:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800526c:	e02d      	b.n	80052ca <HAL_UART_Receive+0xe2>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	22ff      	movs	r2, #255	; 0xff
 8005272:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005276:	e028      	b.n	80052ca <HAL_UART_Receive+0xe2>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10d      	bne.n	800529c <HAL_UART_Receive+0xb4>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <HAL_UART_Receive+0xaa>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	22ff      	movs	r2, #255	; 0xff
 800528c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005290:	e01b      	b.n	80052ca <HAL_UART_Receive+0xe2>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	227f      	movs	r2, #127	; 0x7f
 8005296:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800529a:	e016      	b.n	80052ca <HAL_UART_Receive+0xe2>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052a4:	d10d      	bne.n	80052c2 <HAL_UART_Receive+0xda>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <HAL_UART_Receive+0xd0>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	227f      	movs	r2, #127	; 0x7f
 80052b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052b6:	e008      	b.n	80052ca <HAL_UART_Receive+0xe2>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	223f      	movs	r2, #63	; 0x3f
 80052bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052c0:	e003      	b.n	80052ca <HAL_UART_Receive+0xe2>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80052d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052da:	d108      	bne.n	80052ee <HAL_UART_Receive+0x106>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	e003      	b.n	80052f6 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80052fe:	e032      	b.n	8005366 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	2120      	movs	r1, #32
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fed6 	bl	80060bc <UART_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e032      	b.n	8005380 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10c      	bne.n	800533a <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	b29a      	uxth	r2, r3
 8005328:	8a7b      	ldrh	r3, [r7, #18]
 800532a:	4013      	ands	r3, r2
 800532c:	b29a      	uxth	r2, r3
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	3302      	adds	r3, #2
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	e00c      	b.n	8005354 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	b2da      	uxtb	r2, r3
 8005342:	8a7b      	ldrh	r3, [r7, #18]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	4013      	ands	r3, r2
 8005348:	b2da      	uxtb	r2, r3
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	3301      	adds	r3, #1
 8005352:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1c6      	bne.n	8005300 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e000      	b.n	8005380 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005388:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800538c:	b08e      	sub	sp, #56	; 0x38
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053b6:	4313      	orrs	r3, r2
 80053b8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4bc1      	ldr	r3, [pc, #772]	; (80056c8 <UART_SetConfig+0x340>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4ab7      	ldr	r2, [pc, #732]	; (80056cc <UART_SetConfig+0x344>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053fa:	4313      	orrs	r3, r2
 80053fc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	4bb2      	ldr	r3, [pc, #712]	; (80056d0 <UART_SetConfig+0x348>)
 8005406:	4013      	ands	r3, r2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6812      	ldr	r2, [r2, #0]
 800540c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800540e:	430b      	orrs	r3, r1
 8005410:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005418:	f023 010f 	bic.w	r1, r3, #15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4aa9      	ldr	r2, [pc, #676]	; (80056d4 <UART_SetConfig+0x34c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d177      	bne.n	8005522 <UART_SetConfig+0x19a>
 8005432:	4ba9      	ldr	r3, [pc, #676]	; (80056d8 <UART_SetConfig+0x350>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800543a:	2b28      	cmp	r3, #40	; 0x28
 800543c:	d86c      	bhi.n	8005518 <UART_SetConfig+0x190>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0xbc>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	080054e9 	.word	0x080054e9
 8005448:	08005519 	.word	0x08005519
 800544c:	08005519 	.word	0x08005519
 8005450:	08005519 	.word	0x08005519
 8005454:	08005519 	.word	0x08005519
 8005458:	08005519 	.word	0x08005519
 800545c:	08005519 	.word	0x08005519
 8005460:	08005519 	.word	0x08005519
 8005464:	080054f1 	.word	0x080054f1
 8005468:	08005519 	.word	0x08005519
 800546c:	08005519 	.word	0x08005519
 8005470:	08005519 	.word	0x08005519
 8005474:	08005519 	.word	0x08005519
 8005478:	08005519 	.word	0x08005519
 800547c:	08005519 	.word	0x08005519
 8005480:	08005519 	.word	0x08005519
 8005484:	080054f9 	.word	0x080054f9
 8005488:	08005519 	.word	0x08005519
 800548c:	08005519 	.word	0x08005519
 8005490:	08005519 	.word	0x08005519
 8005494:	08005519 	.word	0x08005519
 8005498:	08005519 	.word	0x08005519
 800549c:	08005519 	.word	0x08005519
 80054a0:	08005519 	.word	0x08005519
 80054a4:	08005501 	.word	0x08005501
 80054a8:	08005519 	.word	0x08005519
 80054ac:	08005519 	.word	0x08005519
 80054b0:	08005519 	.word	0x08005519
 80054b4:	08005519 	.word	0x08005519
 80054b8:	08005519 	.word	0x08005519
 80054bc:	08005519 	.word	0x08005519
 80054c0:	08005519 	.word	0x08005519
 80054c4:	08005509 	.word	0x08005509
 80054c8:	08005519 	.word	0x08005519
 80054cc:	08005519 	.word	0x08005519
 80054d0:	08005519 	.word	0x08005519
 80054d4:	08005519 	.word	0x08005519
 80054d8:	08005519 	.word	0x08005519
 80054dc:	08005519 	.word	0x08005519
 80054e0:	08005519 	.word	0x08005519
 80054e4:	08005511 	.word	0x08005511
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ee:	e233      	b.n	8005958 <UART_SetConfig+0x5d0>
 80054f0:	2304      	movs	r3, #4
 80054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f6:	e22f      	b.n	8005958 <UART_SetConfig+0x5d0>
 80054f8:	2308      	movs	r3, #8
 80054fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fe:	e22b      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005500:	2310      	movs	r3, #16
 8005502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005506:	e227      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005508:	2320      	movs	r3, #32
 800550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800550e:	e223      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005510:	2340      	movs	r3, #64	; 0x40
 8005512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005516:	e21f      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005518:	2380      	movs	r3, #128	; 0x80
 800551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800551e:	bf00      	nop
 8005520:	e21a      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a6d      	ldr	r2, [pc, #436]	; (80056dc <UART_SetConfig+0x354>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d132      	bne.n	8005592 <UART_SetConfig+0x20a>
 800552c:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <UART_SetConfig+0x350>)
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	2b05      	cmp	r3, #5
 8005536:	d827      	bhi.n	8005588 <UART_SetConfig+0x200>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0x1b8>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005559 	.word	0x08005559
 8005544:	08005561 	.word	0x08005561
 8005548:	08005569 	.word	0x08005569
 800554c:	08005571 	.word	0x08005571
 8005550:	08005579 	.word	0x08005579
 8005554:	08005581 	.word	0x08005581
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555e:	e1fb      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005566:	e1f7      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556e:	e1f3      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005576:	e1ef      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005578:	2320      	movs	r3, #32
 800557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800557e:	e1eb      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005580:	2340      	movs	r3, #64	; 0x40
 8005582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005586:	e1e7      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005588:	2380      	movs	r3, #128	; 0x80
 800558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800558e:	bf00      	nop
 8005590:	e1e2      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a52      	ldr	r2, [pc, #328]	; (80056e0 <UART_SetConfig+0x358>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d132      	bne.n	8005602 <UART_SetConfig+0x27a>
 800559c:	4b4e      	ldr	r3, [pc, #312]	; (80056d8 <UART_SetConfig+0x350>)
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	2b05      	cmp	r3, #5
 80055a6:	d827      	bhi.n	80055f8 <UART_SetConfig+0x270>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x228>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055c9 	.word	0x080055c9
 80055b4:	080055d1 	.word	0x080055d1
 80055b8:	080055d9 	.word	0x080055d9
 80055bc:	080055e1 	.word	0x080055e1
 80055c0:	080055e9 	.word	0x080055e9
 80055c4:	080055f1 	.word	0x080055f1
 80055c8:	2300      	movs	r3, #0
 80055ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ce:	e1c3      	b.n	8005958 <UART_SetConfig+0x5d0>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d6:	e1bf      	b.n	8005958 <UART_SetConfig+0x5d0>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055de:	e1bb      	b.n	8005958 <UART_SetConfig+0x5d0>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055e6:	e1b7      	b.n	8005958 <UART_SetConfig+0x5d0>
 80055e8:	2320      	movs	r3, #32
 80055ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ee:	e1b3      	b.n	8005958 <UART_SetConfig+0x5d0>
 80055f0:	2340      	movs	r3, #64	; 0x40
 80055f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055f6:	e1af      	b.n	8005958 <UART_SetConfig+0x5d0>
 80055f8:	2380      	movs	r3, #128	; 0x80
 80055fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055fe:	bf00      	nop
 8005600:	e1aa      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a37      	ldr	r2, [pc, #220]	; (80056e4 <UART_SetConfig+0x35c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d132      	bne.n	8005672 <UART_SetConfig+0x2ea>
 800560c:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <UART_SetConfig+0x350>)
 800560e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	2b05      	cmp	r3, #5
 8005616:	d827      	bhi.n	8005668 <UART_SetConfig+0x2e0>
 8005618:	a201      	add	r2, pc, #4	; (adr r2, 8005620 <UART_SetConfig+0x298>)
 800561a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561e:	bf00      	nop
 8005620:	08005639 	.word	0x08005639
 8005624:	08005641 	.word	0x08005641
 8005628:	08005649 	.word	0x08005649
 800562c:	08005651 	.word	0x08005651
 8005630:	08005659 	.word	0x08005659
 8005634:	08005661 	.word	0x08005661
 8005638:	2300      	movs	r3, #0
 800563a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800563e:	e18b      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005640:	2304      	movs	r3, #4
 8005642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005646:	e187      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005648:	2308      	movs	r3, #8
 800564a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800564e:	e183      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005650:	2310      	movs	r3, #16
 8005652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005656:	e17f      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005658:	2320      	movs	r3, #32
 800565a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565e:	e17b      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005660:	2340      	movs	r3, #64	; 0x40
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e177      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800566e:	bf00      	nop
 8005670:	e172      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1c      	ldr	r2, [pc, #112]	; (80056e8 <UART_SetConfig+0x360>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d144      	bne.n	8005706 <UART_SetConfig+0x37e>
 800567c:	4b16      	ldr	r3, [pc, #88]	; (80056d8 <UART_SetConfig+0x350>)
 800567e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	2b05      	cmp	r3, #5
 8005686:	d839      	bhi.n	80056fc <UART_SetConfig+0x374>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <UART_SetConfig+0x308>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056a9 	.word	0x080056a9
 8005694:	080056b1 	.word	0x080056b1
 8005698:	080056b9 	.word	0x080056b9
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056ed 	.word	0x080056ed
 80056a4:	080056f5 	.word	0x080056f5
 80056a8:	2300      	movs	r3, #0
 80056aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056ae:	e153      	b.n	8005958 <UART_SetConfig+0x5d0>
 80056b0:	2304      	movs	r3, #4
 80056b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056b6:	e14f      	b.n	8005958 <UART_SetConfig+0x5d0>
 80056b8:	2308      	movs	r3, #8
 80056ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056be:	e14b      	b.n	8005958 <UART_SetConfig+0x5d0>
 80056c0:	2310      	movs	r3, #16
 80056c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056c6:	e147      	b.n	8005958 <UART_SetConfig+0x5d0>
 80056c8:	cfff69f3 	.word	0xcfff69f3
 80056cc:	58000c00 	.word	0x58000c00
 80056d0:	11fff4ff 	.word	0x11fff4ff
 80056d4:	40011000 	.word	0x40011000
 80056d8:	58024400 	.word	0x58024400
 80056dc:	40004400 	.word	0x40004400
 80056e0:	40004800 	.word	0x40004800
 80056e4:	40004c00 	.word	0x40004c00
 80056e8:	40005000 	.word	0x40005000
 80056ec:	2320      	movs	r3, #32
 80056ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056f2:	e131      	b.n	8005958 <UART_SetConfig+0x5d0>
 80056f4:	2340      	movs	r3, #64	; 0x40
 80056f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80056fa:	e12d      	b.n	8005958 <UART_SetConfig+0x5d0>
 80056fc:	2380      	movs	r3, #128	; 0x80
 80056fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005702:	bf00      	nop
 8005704:	e128      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4ab6      	ldr	r2, [pc, #728]	; (80059e4 <UART_SetConfig+0x65c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d178      	bne.n	8005802 <UART_SetConfig+0x47a>
 8005710:	4bb5      	ldr	r3, [pc, #724]	; (80059e8 <UART_SetConfig+0x660>)
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005718:	2b28      	cmp	r3, #40	; 0x28
 800571a:	d86d      	bhi.n	80057f8 <UART_SetConfig+0x470>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <UART_SetConfig+0x39c>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	080057c9 	.word	0x080057c9
 8005728:	080057f9 	.word	0x080057f9
 800572c:	080057f9 	.word	0x080057f9
 8005730:	080057f9 	.word	0x080057f9
 8005734:	080057f9 	.word	0x080057f9
 8005738:	080057f9 	.word	0x080057f9
 800573c:	080057f9 	.word	0x080057f9
 8005740:	080057f9 	.word	0x080057f9
 8005744:	080057d1 	.word	0x080057d1
 8005748:	080057f9 	.word	0x080057f9
 800574c:	080057f9 	.word	0x080057f9
 8005750:	080057f9 	.word	0x080057f9
 8005754:	080057f9 	.word	0x080057f9
 8005758:	080057f9 	.word	0x080057f9
 800575c:	080057f9 	.word	0x080057f9
 8005760:	080057f9 	.word	0x080057f9
 8005764:	080057d9 	.word	0x080057d9
 8005768:	080057f9 	.word	0x080057f9
 800576c:	080057f9 	.word	0x080057f9
 8005770:	080057f9 	.word	0x080057f9
 8005774:	080057f9 	.word	0x080057f9
 8005778:	080057f9 	.word	0x080057f9
 800577c:	080057f9 	.word	0x080057f9
 8005780:	080057f9 	.word	0x080057f9
 8005784:	080057e1 	.word	0x080057e1
 8005788:	080057f9 	.word	0x080057f9
 800578c:	080057f9 	.word	0x080057f9
 8005790:	080057f9 	.word	0x080057f9
 8005794:	080057f9 	.word	0x080057f9
 8005798:	080057f9 	.word	0x080057f9
 800579c:	080057f9 	.word	0x080057f9
 80057a0:	080057f9 	.word	0x080057f9
 80057a4:	080057e9 	.word	0x080057e9
 80057a8:	080057f9 	.word	0x080057f9
 80057ac:	080057f9 	.word	0x080057f9
 80057b0:	080057f9 	.word	0x080057f9
 80057b4:	080057f9 	.word	0x080057f9
 80057b8:	080057f9 	.word	0x080057f9
 80057bc:	080057f9 	.word	0x080057f9
 80057c0:	080057f9 	.word	0x080057f9
 80057c4:	080057f1 	.word	0x080057f1
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ce:	e0c3      	b.n	8005958 <UART_SetConfig+0x5d0>
 80057d0:	2304      	movs	r3, #4
 80057d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057d6:	e0bf      	b.n	8005958 <UART_SetConfig+0x5d0>
 80057d8:	2308      	movs	r3, #8
 80057da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057de:	e0bb      	b.n	8005958 <UART_SetConfig+0x5d0>
 80057e0:	2310      	movs	r3, #16
 80057e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057e6:	e0b7      	b.n	8005958 <UART_SetConfig+0x5d0>
 80057e8:	2320      	movs	r3, #32
 80057ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ee:	e0b3      	b.n	8005958 <UART_SetConfig+0x5d0>
 80057f0:	2340      	movs	r3, #64	; 0x40
 80057f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057f6:	e0af      	b.n	8005958 <UART_SetConfig+0x5d0>
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057fe:	bf00      	nop
 8005800:	e0aa      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a79      	ldr	r2, [pc, #484]	; (80059ec <UART_SetConfig+0x664>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d132      	bne.n	8005872 <UART_SetConfig+0x4ea>
 800580c:	4b76      	ldr	r3, [pc, #472]	; (80059e8 <UART_SetConfig+0x660>)
 800580e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	2b05      	cmp	r3, #5
 8005816:	d827      	bhi.n	8005868 <UART_SetConfig+0x4e0>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <UART_SetConfig+0x498>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005839 	.word	0x08005839
 8005824:	08005841 	.word	0x08005841
 8005828:	08005849 	.word	0x08005849
 800582c:	08005851 	.word	0x08005851
 8005830:	08005859 	.word	0x08005859
 8005834:	08005861 	.word	0x08005861
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800583e:	e08b      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005840:	2304      	movs	r3, #4
 8005842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005846:	e087      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005848:	2308      	movs	r3, #8
 800584a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800584e:	e083      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005850:	2310      	movs	r3, #16
 8005852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005856:	e07f      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005858:	2320      	movs	r3, #32
 800585a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800585e:	e07b      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005866:	e077      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005868:	2380      	movs	r3, #128	; 0x80
 800586a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800586e:	bf00      	nop
 8005870:	e072      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a5e      	ldr	r2, [pc, #376]	; (80059f0 <UART_SetConfig+0x668>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d132      	bne.n	80058e2 <UART_SetConfig+0x55a>
 800587c:	4b5a      	ldr	r3, [pc, #360]	; (80059e8 <UART_SetConfig+0x660>)
 800587e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	2b05      	cmp	r3, #5
 8005886:	d827      	bhi.n	80058d8 <UART_SetConfig+0x550>
 8005888:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x508>)
 800588a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588e:	bf00      	nop
 8005890:	080058a9 	.word	0x080058a9
 8005894:	080058b1 	.word	0x080058b1
 8005898:	080058b9 	.word	0x080058b9
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	2300      	movs	r3, #0
 80058aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ae:	e053      	b.n	8005958 <UART_SetConfig+0x5d0>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058b6:	e04f      	b.n	8005958 <UART_SetConfig+0x5d0>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058be:	e04b      	b.n	8005958 <UART_SetConfig+0x5d0>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058c6:	e047      	b.n	8005958 <UART_SetConfig+0x5d0>
 80058c8:	2320      	movs	r3, #32
 80058ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058ce:	e043      	b.n	8005958 <UART_SetConfig+0x5d0>
 80058d0:	2340      	movs	r3, #64	; 0x40
 80058d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058d6:	e03f      	b.n	8005958 <UART_SetConfig+0x5d0>
 80058d8:	2380      	movs	r3, #128	; 0x80
 80058da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058de:	bf00      	nop
 80058e0:	e03a      	b.n	8005958 <UART_SetConfig+0x5d0>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a43      	ldr	r2, [pc, #268]	; (80059f4 <UART_SetConfig+0x66c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d132      	bne.n	8005952 <UART_SetConfig+0x5ca>
 80058ec:	4b3e      	ldr	r3, [pc, #248]	; (80059e8 <UART_SetConfig+0x660>)
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	2b05      	cmp	r3, #5
 80058f6:	d827      	bhi.n	8005948 <UART_SetConfig+0x5c0>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <UART_SetConfig+0x578>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005919 	.word	0x08005919
 8005904:	08005921 	.word	0x08005921
 8005908:	08005929 	.word	0x08005929
 800590c:	08005931 	.word	0x08005931
 8005910:	08005939 	.word	0x08005939
 8005914:	08005941 	.word	0x08005941
 8005918:	2302      	movs	r3, #2
 800591a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800591e:	e01b      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005920:	2304      	movs	r3, #4
 8005922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005926:	e017      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005928:	2308      	movs	r3, #8
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800592e:	e013      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005930:	2310      	movs	r3, #16
 8005932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005936:	e00f      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005938:	2320      	movs	r3, #32
 800593a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800593e:	e00b      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005940:	2340      	movs	r3, #64	; 0x40
 8005942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005946:	e007      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005948:	2380      	movs	r3, #128	; 0x80
 800594a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800594e:	bf00      	nop
 8005950:	e002      	b.n	8005958 <UART_SetConfig+0x5d0>
 8005952:	2380      	movs	r3, #128	; 0x80
 8005954:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a25      	ldr	r2, [pc, #148]	; (80059f4 <UART_SetConfig+0x66c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	f040 80b8 	bne.w	8005ad4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005968:	2b08      	cmp	r3, #8
 800596a:	d019      	beq.n	80059a0 <UART_SetConfig+0x618>
 800596c:	2b08      	cmp	r3, #8
 800596e:	dc04      	bgt.n	800597a <UART_SetConfig+0x5f2>
 8005970:	2b02      	cmp	r3, #2
 8005972:	d009      	beq.n	8005988 <UART_SetConfig+0x600>
 8005974:	2b04      	cmp	r3, #4
 8005976:	d00b      	beq.n	8005990 <UART_SetConfig+0x608>
 8005978:	e042      	b.n	8005a00 <UART_SetConfig+0x678>
 800597a:	2b20      	cmp	r3, #32
 800597c:	d02b      	beq.n	80059d6 <UART_SetConfig+0x64e>
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d02c      	beq.n	80059dc <UART_SetConfig+0x654>
 8005982:	2b10      	cmp	r3, #16
 8005984:	d014      	beq.n	80059b0 <UART_SetConfig+0x628>
 8005986:	e03b      	b.n	8005a00 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005988:	f7fe ff36 	bl	80047f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800598c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800598e:	e03d      	b.n	8005a0c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005990:	f107 0314 	add.w	r3, r7, #20
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe ff45 	bl	8004824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800599e:	e035      	b.n	8005a0c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a0:	f107 0308 	add.w	r3, r7, #8
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff f889 	bl	8004abc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059ae:	e02d      	b.n	8005a0c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b0:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <UART_SetConfig+0x660>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0320 	and.w	r3, r3, #32
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d009      	beq.n	80059d0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <UART_SetConfig+0x660>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	08db      	lsrs	r3, r3, #3
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	4a0c      	ldr	r2, [pc, #48]	; (80059f8 <UART_SetConfig+0x670>)
 80059c8:	fa22 f303 	lsr.w	r3, r2, r3
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059ce:	e01d      	b.n	8005a0c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <UART_SetConfig+0x670>)
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059d4:	e01a      	b.n	8005a0c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059d6:	4b09      	ldr	r3, [pc, #36]	; (80059fc <UART_SetConfig+0x674>)
 80059d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059da:	e017      	b.n	8005a0c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059e2:	e013      	b.n	8005a0c <UART_SetConfig+0x684>
 80059e4:	40011400 	.word	0x40011400
 80059e8:	58024400 	.word	0x58024400
 80059ec:	40007800 	.word	0x40007800
 80059f0:	40007c00 	.word	0x40007c00
 80059f4:	58000c00 	.word	0x58000c00
 80059f8:	03d09000 	.word	0x03d09000
 80059fc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005a0a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 824d 	beq.w	8005eae <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	4aad      	ldr	r2, [pc, #692]	; (8005cd0 <UART_SetConfig+0x948>)
 8005a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a26:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d305      	bcc.n	8005a44 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d903      	bls.n	8005a4c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a4a:	e230      	b.n	8005eae <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f04f 0100 	mov.w	r1, #0
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	4a9d      	ldr	r2, [pc, #628]	; (8005cd0 <UART_SetConfig+0x948>)
 8005a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f04f 0400 	mov.w	r4, #0
 8005a64:	461a      	mov	r2, r3
 8005a66:	4623      	mov	r3, r4
 8005a68:	f7fa fc8a 	bl	8000380 <__aeabi_uldivmod>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	4619      	mov	r1, r3
 8005a72:	4622      	mov	r2, r4
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	f04f 0400 	mov.w	r4, #0
 8005a7c:	0214      	lsls	r4, r2, #8
 8005a7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005a82:	020b      	lsls	r3, r1, #8
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6852      	ldr	r2, [r2, #4]
 8005a88:	0852      	lsrs	r2, r2, #1
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	eb13 0b01 	adds.w	fp, r3, r1
 8005a94:	eb44 0c02 	adc.w	ip, r4, r2
 8005a98:	4658      	mov	r0, fp
 8005a9a:	4661      	mov	r1, ip
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f04f 0400 	mov.w	r4, #0
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	4623      	mov	r3, r4
 8005aa8:	f7fa fc6a 	bl	8000380 <__aeabi_uldivmod>
 8005aac:	4603      	mov	r3, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab8:	d308      	bcc.n	8005acc <UART_SetConfig+0x744>
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac0:	d204      	bcs.n	8005acc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	e1f0      	b.n	8005eae <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ad2:	e1ec      	b.n	8005eae <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005adc:	f040 8100 	bne.w	8005ce0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8005ae0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ae4:	2b40      	cmp	r3, #64	; 0x40
 8005ae6:	f200 80b7 	bhi.w	8005c58 <UART_SetConfig+0x8d0>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <UART_SetConfig+0x768>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005bf5 	.word	0x08005bf5
 8005af4:	08005bfd 	.word	0x08005bfd
 8005af8:	08005c59 	.word	0x08005c59
 8005afc:	08005c59 	.word	0x08005c59
 8005b00:	08005c05 	.word	0x08005c05
 8005b04:	08005c59 	.word	0x08005c59
 8005b08:	08005c59 	.word	0x08005c59
 8005b0c:	08005c59 	.word	0x08005c59
 8005b10:	08005c15 	.word	0x08005c15
 8005b14:	08005c59 	.word	0x08005c59
 8005b18:	08005c59 	.word	0x08005c59
 8005b1c:	08005c59 	.word	0x08005c59
 8005b20:	08005c59 	.word	0x08005c59
 8005b24:	08005c59 	.word	0x08005c59
 8005b28:	08005c59 	.word	0x08005c59
 8005b2c:	08005c59 	.word	0x08005c59
 8005b30:	08005c25 	.word	0x08005c25
 8005b34:	08005c59 	.word	0x08005c59
 8005b38:	08005c59 	.word	0x08005c59
 8005b3c:	08005c59 	.word	0x08005c59
 8005b40:	08005c59 	.word	0x08005c59
 8005b44:	08005c59 	.word	0x08005c59
 8005b48:	08005c59 	.word	0x08005c59
 8005b4c:	08005c59 	.word	0x08005c59
 8005b50:	08005c59 	.word	0x08005c59
 8005b54:	08005c59 	.word	0x08005c59
 8005b58:	08005c59 	.word	0x08005c59
 8005b5c:	08005c59 	.word	0x08005c59
 8005b60:	08005c59 	.word	0x08005c59
 8005b64:	08005c59 	.word	0x08005c59
 8005b68:	08005c59 	.word	0x08005c59
 8005b6c:	08005c59 	.word	0x08005c59
 8005b70:	08005c4b 	.word	0x08005c4b
 8005b74:	08005c59 	.word	0x08005c59
 8005b78:	08005c59 	.word	0x08005c59
 8005b7c:	08005c59 	.word	0x08005c59
 8005b80:	08005c59 	.word	0x08005c59
 8005b84:	08005c59 	.word	0x08005c59
 8005b88:	08005c59 	.word	0x08005c59
 8005b8c:	08005c59 	.word	0x08005c59
 8005b90:	08005c59 	.word	0x08005c59
 8005b94:	08005c59 	.word	0x08005c59
 8005b98:	08005c59 	.word	0x08005c59
 8005b9c:	08005c59 	.word	0x08005c59
 8005ba0:	08005c59 	.word	0x08005c59
 8005ba4:	08005c59 	.word	0x08005c59
 8005ba8:	08005c59 	.word	0x08005c59
 8005bac:	08005c59 	.word	0x08005c59
 8005bb0:	08005c59 	.word	0x08005c59
 8005bb4:	08005c59 	.word	0x08005c59
 8005bb8:	08005c59 	.word	0x08005c59
 8005bbc:	08005c59 	.word	0x08005c59
 8005bc0:	08005c59 	.word	0x08005c59
 8005bc4:	08005c59 	.word	0x08005c59
 8005bc8:	08005c59 	.word	0x08005c59
 8005bcc:	08005c59 	.word	0x08005c59
 8005bd0:	08005c59 	.word	0x08005c59
 8005bd4:	08005c59 	.word	0x08005c59
 8005bd8:	08005c59 	.word	0x08005c59
 8005bdc:	08005c59 	.word	0x08005c59
 8005be0:	08005c59 	.word	0x08005c59
 8005be4:	08005c59 	.word	0x08005c59
 8005be8:	08005c59 	.word	0x08005c59
 8005bec:	08005c59 	.word	0x08005c59
 8005bf0:	08005c51 	.word	0x08005c51
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fd fee6 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005bfa:	e033      	b.n	8005c64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fd fef8 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005c00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005c02:	e02f      	b.n	8005c64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fe fe0b 	bl	8004824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c12:	e027      	b.n	8005c64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c14:	f107 0308 	add.w	r3, r7, #8
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fe ff4f 	bl	8004abc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c22:	e01f      	b.n	8005c64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c24:	4b2b      	ldr	r3, [pc, #172]	; (8005cd4 <UART_SetConfig+0x94c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c30:	4b28      	ldr	r3, [pc, #160]	; (8005cd4 <UART_SetConfig+0x94c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <UART_SetConfig+0x950>)
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c42:	e00f      	b.n	8005c64 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8005c44:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <UART_SetConfig+0x950>)
 8005c46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c48:	e00c      	b.n	8005c64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c4a:	4b24      	ldr	r3, [pc, #144]	; (8005cdc <UART_SetConfig+0x954>)
 8005c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c4e:	e009      	b.n	8005c64 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005c56:	e005      	b.n	8005c64 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005c62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f000 8121 	beq.w	8005eae <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <UART_SetConfig+0x948>)
 8005c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c76:	461a      	mov	r2, r3
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c7e:	005a      	lsls	r2, r3, #1
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	441a      	add	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b0f      	cmp	r3, #15
 8005c98:	d916      	bls.n	8005cc8 <UART_SetConfig+0x940>
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ca0:	d212      	bcs.n	8005cc8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f023 030f 	bic.w	r3, r3, #15
 8005caa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005cc4:	60da      	str	r2, [r3, #12]
 8005cc6:	e0f2      	b.n	8005eae <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005cce:	e0ee      	b.n	8005eae <UART_SetConfig+0xb26>
 8005cd0:	080074f0 	.word	0x080074f0
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	03d09000 	.word	0x03d09000
 8005cdc:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	f200 80b7 	bhi.w	8005e58 <UART_SetConfig+0xad0>
 8005cea:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x968>)
 8005cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf0:	08005df5 	.word	0x08005df5
 8005cf4:	08005dfd 	.word	0x08005dfd
 8005cf8:	08005e59 	.word	0x08005e59
 8005cfc:	08005e59 	.word	0x08005e59
 8005d00:	08005e05 	.word	0x08005e05
 8005d04:	08005e59 	.word	0x08005e59
 8005d08:	08005e59 	.word	0x08005e59
 8005d0c:	08005e59 	.word	0x08005e59
 8005d10:	08005e15 	.word	0x08005e15
 8005d14:	08005e59 	.word	0x08005e59
 8005d18:	08005e59 	.word	0x08005e59
 8005d1c:	08005e59 	.word	0x08005e59
 8005d20:	08005e59 	.word	0x08005e59
 8005d24:	08005e59 	.word	0x08005e59
 8005d28:	08005e59 	.word	0x08005e59
 8005d2c:	08005e59 	.word	0x08005e59
 8005d30:	08005e25 	.word	0x08005e25
 8005d34:	08005e59 	.word	0x08005e59
 8005d38:	08005e59 	.word	0x08005e59
 8005d3c:	08005e59 	.word	0x08005e59
 8005d40:	08005e59 	.word	0x08005e59
 8005d44:	08005e59 	.word	0x08005e59
 8005d48:	08005e59 	.word	0x08005e59
 8005d4c:	08005e59 	.word	0x08005e59
 8005d50:	08005e59 	.word	0x08005e59
 8005d54:	08005e59 	.word	0x08005e59
 8005d58:	08005e59 	.word	0x08005e59
 8005d5c:	08005e59 	.word	0x08005e59
 8005d60:	08005e59 	.word	0x08005e59
 8005d64:	08005e59 	.word	0x08005e59
 8005d68:	08005e59 	.word	0x08005e59
 8005d6c:	08005e59 	.word	0x08005e59
 8005d70:	08005e4b 	.word	0x08005e4b
 8005d74:	08005e59 	.word	0x08005e59
 8005d78:	08005e59 	.word	0x08005e59
 8005d7c:	08005e59 	.word	0x08005e59
 8005d80:	08005e59 	.word	0x08005e59
 8005d84:	08005e59 	.word	0x08005e59
 8005d88:	08005e59 	.word	0x08005e59
 8005d8c:	08005e59 	.word	0x08005e59
 8005d90:	08005e59 	.word	0x08005e59
 8005d94:	08005e59 	.word	0x08005e59
 8005d98:	08005e59 	.word	0x08005e59
 8005d9c:	08005e59 	.word	0x08005e59
 8005da0:	08005e59 	.word	0x08005e59
 8005da4:	08005e59 	.word	0x08005e59
 8005da8:	08005e59 	.word	0x08005e59
 8005dac:	08005e59 	.word	0x08005e59
 8005db0:	08005e59 	.word	0x08005e59
 8005db4:	08005e59 	.word	0x08005e59
 8005db8:	08005e59 	.word	0x08005e59
 8005dbc:	08005e59 	.word	0x08005e59
 8005dc0:	08005e59 	.word	0x08005e59
 8005dc4:	08005e59 	.word	0x08005e59
 8005dc8:	08005e59 	.word	0x08005e59
 8005dcc:	08005e59 	.word	0x08005e59
 8005dd0:	08005e59 	.word	0x08005e59
 8005dd4:	08005e59 	.word	0x08005e59
 8005dd8:	08005e59 	.word	0x08005e59
 8005ddc:	08005e59 	.word	0x08005e59
 8005de0:	08005e59 	.word	0x08005e59
 8005de4:	08005e59 	.word	0x08005e59
 8005de8:	08005e59 	.word	0x08005e59
 8005dec:	08005e59 	.word	0x08005e59
 8005df0:	08005e51 	.word	0x08005e51
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fd fde6 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8005df8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005dfa:	e033      	b.n	8005e64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dfc:	f7fd fdf8 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005e00:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005e02:	e02f      	b.n	8005e64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e04:	f107 0314 	add.w	r3, r7, #20
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fd0b 	bl	8004824 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e12:	e027      	b.n	8005e64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e14:	f107 0308 	add.w	r3, r7, #8
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fe fe4f 	bl	8004abc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e22:	e01f      	b.n	8005e64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e24:	4b2c      	ldr	r3, [pc, #176]	; (8005ed8 <UART_SetConfig+0xb50>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e30:	4b29      	ldr	r3, [pc, #164]	; (8005ed8 <UART_SetConfig+0xb50>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	08db      	lsrs	r3, r3, #3
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	4a28      	ldr	r2, [pc, #160]	; (8005edc <UART_SetConfig+0xb54>)
 8005e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e42:	e00f      	b.n	8005e64 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <UART_SetConfig+0xb54>)
 8005e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e48:	e00c      	b.n	8005e64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e4a:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <UART_SetConfig+0xb58>)
 8005e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e4e:	e009      	b.n	8005e64 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005e56:	e005      	b.n	8005e64 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005e62:	bf00      	nop
    }

    if (pclk != 0U)
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d021      	beq.n	8005eae <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <UART_SetConfig+0xb5c>)
 8005e70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e74:	461a      	mov	r2, r3
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	085b      	lsrs	r3, r3, #1
 8005e82:	441a      	add	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	2b0f      	cmp	r3, #15
 8005e94:	d908      	bls.n	8005ea8 <UART_SetConfig+0xb20>
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9c:	d204      	bcs.n	8005ea8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	e002      	b.n	8005eae <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005eca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3738      	adds	r7, #56	; 0x38
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	03d09000 	.word	0x03d09000
 8005ee0:	003d0900 	.word	0x003d0900
 8005ee4:	080074f0 	.word	0x080074f0

08005ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00a      	beq.n	8005f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00a      	beq.n	8005fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe6:	d10a      	bne.n	8005ffe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af02      	add	r7, sp, #8
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800603c:	f7fb f968 	bl	8001310 <HAL_GetTick>
 8006040:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b08      	cmp	r3, #8
 800604e:	d10e      	bne.n	800606e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006050:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f82c 	bl	80060bc <UART_WaitOnFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e022      	b.n	80060b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b04      	cmp	r3, #4
 800607a:	d10e      	bne.n	800609a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f816 	bl	80060bc <UART_WaitOnFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e00c      	b.n	80060b4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3710      	adds	r7, #16
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060cc:	e062      	b.n	8006194 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d4:	d05e      	beq.n	8006194 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060d6:	f7fb f91b 	bl	8001310 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d302      	bcc.n	80060ec <UART_WaitOnFlagUntilTimeout+0x30>
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d11d      	bne.n	8006128 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060fa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2220      	movs	r2, #32
 8006110:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e045      	b.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0304 	and.w	r3, r3, #4
 8006132:	2b00      	cmp	r3, #0
 8006134:	d02e      	beq.n	8006194 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006144:	d126      	bne.n	8006194 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800614e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800615e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2220      	movs	r2, #32
 800617c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e00f      	b.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69da      	ldr	r2, [r3, #28]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	4013      	ands	r3, r2
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	bf0c      	ite	eq
 80061a4:	2301      	moveq	r3, #1
 80061a6:	2300      	movne	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d08d      	beq.n	80060ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d101      	bne.n	80061d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80061ce:	2302      	movs	r3, #2
 80061d0:	e027      	b.n	8006222 <HAL_UARTEx_DisableFifoMode+0x66>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2224      	movs	r2, #36	; 0x24
 80061de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0201 	bic.w	r2, r2, #1
 80061f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006200:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006242:	2302      	movs	r3, #2
 8006244:	e02d      	b.n	80062a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2224      	movs	r2, #36	; 0x24
 8006252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f850 	bl	8006328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062be:	2302      	movs	r3, #2
 80062c0:	e02d      	b.n	800631e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2224      	movs	r2, #36	; 0x24
 80062ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 f812 	bl	8006328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2220      	movs	r2, #32
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006328:	b480      	push	{r7}
 800632a:	b089      	sub	sp, #36	; 0x24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006330:	4a2f      	ldr	r2, [pc, #188]	; (80063f0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006332:	f107 0314 	add.w	r3, r7, #20
 8006336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800633a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800633e:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006340:	f107 030c 	add.w	r3, r7, #12
 8006344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006348:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006350:	2b00      	cmp	r3, #0
 8006352:	d108      	bne.n	8006366 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006364:	e03d      	b.n	80063e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006366:	2310      	movs	r3, #16
 8006368:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800636a:	2310      	movs	r3, #16
 800636c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	0e5b      	lsrs	r3, r3, #25
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	0f5b      	lsrs	r3, r3, #29
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800638e:	7fbb      	ldrb	r3, [r7, #30]
 8006390:	7f3a      	ldrb	r2, [r7, #28]
 8006392:	f107 0120 	add.w	r1, r7, #32
 8006396:	440a      	add	r2, r1
 8006398:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800639c:	fb02 f303 	mul.w	r3, r2, r3
 80063a0:	7f3a      	ldrb	r2, [r7, #28]
 80063a2:	f107 0120 	add.w	r1, r7, #32
 80063a6:	440a      	add	r2, r1
 80063a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80063ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80063b8:	7ffb      	ldrb	r3, [r7, #31]
 80063ba:	7f7a      	ldrb	r2, [r7, #29]
 80063bc:	f107 0120 	add.w	r1, r7, #32
 80063c0:	440a      	add	r2, r1
 80063c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80063c6:	fb02 f303 	mul.w	r3, r2, r3
 80063ca:	7f7a      	ldrb	r2, [r7, #29]
 80063cc:	f107 0120 	add.w	r1, r7, #32
 80063d0:	440a      	add	r2, r1
 80063d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80063d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80063da:	b29a      	uxth	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063e2:	bf00      	nop
 80063e4:	3724      	adds	r7, #36	; 0x24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	080074c0 	.word	0x080074c0
 80063f4:	080074c8 	.word	0x080074c8

080063f8 <__errno>:
 80063f8:	4b01      	ldr	r3, [pc, #4]	; (8006400 <__errno+0x8>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	24000010 	.word	0x24000010

08006404 <__libc_init_array>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	4e0d      	ldr	r6, [pc, #52]	; (800643c <__libc_init_array+0x38>)
 8006408:	4c0d      	ldr	r4, [pc, #52]	; (8006440 <__libc_init_array+0x3c>)
 800640a:	1ba4      	subs	r4, r4, r6
 800640c:	10a4      	asrs	r4, r4, #2
 800640e:	2500      	movs	r5, #0
 8006410:	42a5      	cmp	r5, r4
 8006412:	d109      	bne.n	8006428 <__libc_init_array+0x24>
 8006414:	4e0b      	ldr	r6, [pc, #44]	; (8006444 <__libc_init_array+0x40>)
 8006416:	4c0c      	ldr	r4, [pc, #48]	; (8006448 <__libc_init_array+0x44>)
 8006418:	f001 f810 	bl	800743c <_init>
 800641c:	1ba4      	subs	r4, r4, r6
 800641e:	10a4      	asrs	r4, r4, #2
 8006420:	2500      	movs	r5, #0
 8006422:	42a5      	cmp	r5, r4
 8006424:	d105      	bne.n	8006432 <__libc_init_array+0x2e>
 8006426:	bd70      	pop	{r4, r5, r6, pc}
 8006428:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800642c:	4798      	blx	r3
 800642e:	3501      	adds	r5, #1
 8006430:	e7ee      	b.n	8006410 <__libc_init_array+0xc>
 8006432:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006436:	4798      	blx	r3
 8006438:	3501      	adds	r5, #1
 800643a:	e7f2      	b.n	8006422 <__libc_init_array+0x1e>
 800643c:	080075a8 	.word	0x080075a8
 8006440:	080075a8 	.word	0x080075a8
 8006444:	080075a8 	.word	0x080075a8
 8006448:	080075ac 	.word	0x080075ac

0800644c <memcpy>:
 800644c:	b510      	push	{r4, lr}
 800644e:	1e43      	subs	r3, r0, #1
 8006450:	440a      	add	r2, r1
 8006452:	4291      	cmp	r1, r2
 8006454:	d100      	bne.n	8006458 <memcpy+0xc>
 8006456:	bd10      	pop	{r4, pc}
 8006458:	f811 4b01 	ldrb.w	r4, [r1], #1
 800645c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006460:	e7f7      	b.n	8006452 <memcpy+0x6>

08006462 <memset>:
 8006462:	4402      	add	r2, r0
 8006464:	4603      	mov	r3, r0
 8006466:	4293      	cmp	r3, r2
 8006468:	d100      	bne.n	800646c <memset+0xa>
 800646a:	4770      	bx	lr
 800646c:	f803 1b01 	strb.w	r1, [r3], #1
 8006470:	e7f9      	b.n	8006466 <memset+0x4>
	...

08006474 <iprintf>:
 8006474:	b40f      	push	{r0, r1, r2, r3}
 8006476:	4b0a      	ldr	r3, [pc, #40]	; (80064a0 <iprintf+0x2c>)
 8006478:	b513      	push	{r0, r1, r4, lr}
 800647a:	681c      	ldr	r4, [r3, #0]
 800647c:	b124      	cbz	r4, 8006488 <iprintf+0x14>
 800647e:	69a3      	ldr	r3, [r4, #24]
 8006480:	b913      	cbnz	r3, 8006488 <iprintf+0x14>
 8006482:	4620      	mov	r0, r4
 8006484:	f000 f9c0 	bl	8006808 <__sinit>
 8006488:	ab05      	add	r3, sp, #20
 800648a:	9a04      	ldr	r2, [sp, #16]
 800648c:	68a1      	ldr	r1, [r4, #8]
 800648e:	9301      	str	r3, [sp, #4]
 8006490:	4620      	mov	r0, r4
 8006492:	f000 fb81 	bl	8006b98 <_vfiprintf_r>
 8006496:	b002      	add	sp, #8
 8006498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800649c:	b004      	add	sp, #16
 800649e:	4770      	bx	lr
 80064a0:	24000010 	.word	0x24000010

080064a4 <putchar>:
 80064a4:	b538      	push	{r3, r4, r5, lr}
 80064a6:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <putchar+0x24>)
 80064a8:	681c      	ldr	r4, [r3, #0]
 80064aa:	4605      	mov	r5, r0
 80064ac:	b124      	cbz	r4, 80064b8 <putchar+0x14>
 80064ae:	69a3      	ldr	r3, [r4, #24]
 80064b0:	b913      	cbnz	r3, 80064b8 <putchar+0x14>
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f9a8 	bl	8006808 <__sinit>
 80064b8:	68a2      	ldr	r2, [r4, #8]
 80064ba:	4629      	mov	r1, r5
 80064bc:	4620      	mov	r0, r4
 80064be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064c2:	f000 be07 	b.w	80070d4 <_putc_r>
 80064c6:	bf00      	nop
 80064c8:	24000010 	.word	0x24000010

080064cc <setvbuf>:
 80064cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064d0:	461d      	mov	r5, r3
 80064d2:	4b51      	ldr	r3, [pc, #324]	; (8006618 <setvbuf+0x14c>)
 80064d4:	681e      	ldr	r6, [r3, #0]
 80064d6:	4604      	mov	r4, r0
 80064d8:	460f      	mov	r7, r1
 80064da:	4690      	mov	r8, r2
 80064dc:	b126      	cbz	r6, 80064e8 <setvbuf+0x1c>
 80064de:	69b3      	ldr	r3, [r6, #24]
 80064e0:	b913      	cbnz	r3, 80064e8 <setvbuf+0x1c>
 80064e2:	4630      	mov	r0, r6
 80064e4:	f000 f990 	bl	8006808 <__sinit>
 80064e8:	4b4c      	ldr	r3, [pc, #304]	; (800661c <setvbuf+0x150>)
 80064ea:	429c      	cmp	r4, r3
 80064ec:	d152      	bne.n	8006594 <setvbuf+0xc8>
 80064ee:	6874      	ldr	r4, [r6, #4]
 80064f0:	f1b8 0f02 	cmp.w	r8, #2
 80064f4:	d006      	beq.n	8006504 <setvbuf+0x38>
 80064f6:	f1b8 0f01 	cmp.w	r8, #1
 80064fa:	f200 8089 	bhi.w	8006610 <setvbuf+0x144>
 80064fe:	2d00      	cmp	r5, #0
 8006500:	f2c0 8086 	blt.w	8006610 <setvbuf+0x144>
 8006504:	4621      	mov	r1, r4
 8006506:	4630      	mov	r0, r6
 8006508:	f000 f914 	bl	8006734 <_fflush_r>
 800650c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800650e:	b141      	cbz	r1, 8006522 <setvbuf+0x56>
 8006510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006514:	4299      	cmp	r1, r3
 8006516:	d002      	beq.n	800651e <setvbuf+0x52>
 8006518:	4630      	mov	r0, r6
 800651a:	f000 fa6b 	bl	80069f4 <_free_r>
 800651e:	2300      	movs	r3, #0
 8006520:	6363      	str	r3, [r4, #52]	; 0x34
 8006522:	2300      	movs	r3, #0
 8006524:	61a3      	str	r3, [r4, #24]
 8006526:	6063      	str	r3, [r4, #4]
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	061b      	lsls	r3, r3, #24
 800652c:	d503      	bpl.n	8006536 <setvbuf+0x6a>
 800652e:	6921      	ldr	r1, [r4, #16]
 8006530:	4630      	mov	r0, r6
 8006532:	f000 fa5f 	bl	80069f4 <_free_r>
 8006536:	89a3      	ldrh	r3, [r4, #12]
 8006538:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800653c:	f023 0303 	bic.w	r3, r3, #3
 8006540:	f1b8 0f02 	cmp.w	r8, #2
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	d05d      	beq.n	8006604 <setvbuf+0x138>
 8006548:	ab01      	add	r3, sp, #4
 800654a:	466a      	mov	r2, sp
 800654c:	4621      	mov	r1, r4
 800654e:	4630      	mov	r0, r6
 8006550:	f000 f9e4 	bl	800691c <__swhatbuf_r>
 8006554:	89a3      	ldrh	r3, [r4, #12]
 8006556:	4318      	orrs	r0, r3
 8006558:	81a0      	strh	r0, [r4, #12]
 800655a:	bb2d      	cbnz	r5, 80065a8 <setvbuf+0xdc>
 800655c:	9d00      	ldr	r5, [sp, #0]
 800655e:	4628      	mov	r0, r5
 8006560:	f000 fa40 	bl	80069e4 <malloc>
 8006564:	4607      	mov	r7, r0
 8006566:	2800      	cmp	r0, #0
 8006568:	d14e      	bne.n	8006608 <setvbuf+0x13c>
 800656a:	f8dd 9000 	ldr.w	r9, [sp]
 800656e:	45a9      	cmp	r9, r5
 8006570:	d13c      	bne.n	80065ec <setvbuf+0x120>
 8006572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	81a3      	strh	r3, [r4, #12]
 800657e:	2300      	movs	r3, #0
 8006580:	60a3      	str	r3, [r4, #8]
 8006582:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	2301      	movs	r3, #1
 800658c:	6163      	str	r3, [r4, #20]
 800658e:	b003      	add	sp, #12
 8006590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006594:	4b22      	ldr	r3, [pc, #136]	; (8006620 <setvbuf+0x154>)
 8006596:	429c      	cmp	r4, r3
 8006598:	d101      	bne.n	800659e <setvbuf+0xd2>
 800659a:	68b4      	ldr	r4, [r6, #8]
 800659c:	e7a8      	b.n	80064f0 <setvbuf+0x24>
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <setvbuf+0x158>)
 80065a0:	429c      	cmp	r4, r3
 80065a2:	bf08      	it	eq
 80065a4:	68f4      	ldreq	r4, [r6, #12]
 80065a6:	e7a3      	b.n	80064f0 <setvbuf+0x24>
 80065a8:	2f00      	cmp	r7, #0
 80065aa:	d0d8      	beq.n	800655e <setvbuf+0x92>
 80065ac:	69b3      	ldr	r3, [r6, #24]
 80065ae:	b913      	cbnz	r3, 80065b6 <setvbuf+0xea>
 80065b0:	4630      	mov	r0, r6
 80065b2:	f000 f929 	bl	8006808 <__sinit>
 80065b6:	f1b8 0f01 	cmp.w	r8, #1
 80065ba:	bf08      	it	eq
 80065bc:	89a3      	ldrheq	r3, [r4, #12]
 80065be:	6027      	str	r7, [r4, #0]
 80065c0:	bf04      	itt	eq
 80065c2:	f043 0301 	orreq.w	r3, r3, #1
 80065c6:	81a3      	strheq	r3, [r4, #12]
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f013 0008 	ands.w	r0, r3, #8
 80065ce:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80065d2:	d01b      	beq.n	800660c <setvbuf+0x140>
 80065d4:	f013 0001 	ands.w	r0, r3, #1
 80065d8:	bf18      	it	ne
 80065da:	426d      	negne	r5, r5
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	bf1d      	ittte	ne
 80065e2:	60a3      	strne	r3, [r4, #8]
 80065e4:	61a5      	strne	r5, [r4, #24]
 80065e6:	4618      	movne	r0, r3
 80065e8:	60a5      	streq	r5, [r4, #8]
 80065ea:	e7d0      	b.n	800658e <setvbuf+0xc2>
 80065ec:	4648      	mov	r0, r9
 80065ee:	f000 f9f9 	bl	80069e4 <malloc>
 80065f2:	4607      	mov	r7, r0
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d0bc      	beq.n	8006572 <setvbuf+0xa6>
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	464d      	mov	r5, r9
 8006602:	e7d3      	b.n	80065ac <setvbuf+0xe0>
 8006604:	2000      	movs	r0, #0
 8006606:	e7b6      	b.n	8006576 <setvbuf+0xaa>
 8006608:	46a9      	mov	r9, r5
 800660a:	e7f5      	b.n	80065f8 <setvbuf+0x12c>
 800660c:	60a0      	str	r0, [r4, #8]
 800660e:	e7be      	b.n	800658e <setvbuf+0xc2>
 8006610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006614:	e7bb      	b.n	800658e <setvbuf+0xc2>
 8006616:	bf00      	nop
 8006618:	24000010 	.word	0x24000010
 800661c:	0800752c 	.word	0x0800752c
 8006620:	0800754c 	.word	0x0800754c
 8006624:	0800750c 	.word	0x0800750c

08006628 <__sflush_r>:
 8006628:	898a      	ldrh	r2, [r1, #12]
 800662a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662e:	4605      	mov	r5, r0
 8006630:	0710      	lsls	r0, r2, #28
 8006632:	460c      	mov	r4, r1
 8006634:	d458      	bmi.n	80066e8 <__sflush_r+0xc0>
 8006636:	684b      	ldr	r3, [r1, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	dc05      	bgt.n	8006648 <__sflush_r+0x20>
 800663c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	dc02      	bgt.n	8006648 <__sflush_r+0x20>
 8006642:	2000      	movs	r0, #0
 8006644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800664a:	2e00      	cmp	r6, #0
 800664c:	d0f9      	beq.n	8006642 <__sflush_r+0x1a>
 800664e:	2300      	movs	r3, #0
 8006650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006654:	682f      	ldr	r7, [r5, #0]
 8006656:	6a21      	ldr	r1, [r4, #32]
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	d032      	beq.n	80066c2 <__sflush_r+0x9a>
 800665c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800665e:	89a3      	ldrh	r3, [r4, #12]
 8006660:	075a      	lsls	r2, r3, #29
 8006662:	d505      	bpl.n	8006670 <__sflush_r+0x48>
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	1ac0      	subs	r0, r0, r3
 8006668:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800666a:	b10b      	cbz	r3, 8006670 <__sflush_r+0x48>
 800666c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800666e:	1ac0      	subs	r0, r0, r3
 8006670:	2300      	movs	r3, #0
 8006672:	4602      	mov	r2, r0
 8006674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006676:	6a21      	ldr	r1, [r4, #32]
 8006678:	4628      	mov	r0, r5
 800667a:	47b0      	blx	r6
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	d106      	bne.n	8006690 <__sflush_r+0x68>
 8006682:	6829      	ldr	r1, [r5, #0]
 8006684:	291d      	cmp	r1, #29
 8006686:	d848      	bhi.n	800671a <__sflush_r+0xf2>
 8006688:	4a29      	ldr	r2, [pc, #164]	; (8006730 <__sflush_r+0x108>)
 800668a:	40ca      	lsrs	r2, r1
 800668c:	07d6      	lsls	r6, r2, #31
 800668e:	d544      	bpl.n	800671a <__sflush_r+0xf2>
 8006690:	2200      	movs	r2, #0
 8006692:	6062      	str	r2, [r4, #4]
 8006694:	04d9      	lsls	r1, r3, #19
 8006696:	6922      	ldr	r2, [r4, #16]
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	d504      	bpl.n	80066a6 <__sflush_r+0x7e>
 800669c:	1c42      	adds	r2, r0, #1
 800669e:	d101      	bne.n	80066a4 <__sflush_r+0x7c>
 80066a0:	682b      	ldr	r3, [r5, #0]
 80066a2:	b903      	cbnz	r3, 80066a6 <__sflush_r+0x7e>
 80066a4:	6560      	str	r0, [r4, #84]	; 0x54
 80066a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a8:	602f      	str	r7, [r5, #0]
 80066aa:	2900      	cmp	r1, #0
 80066ac:	d0c9      	beq.n	8006642 <__sflush_r+0x1a>
 80066ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b2:	4299      	cmp	r1, r3
 80066b4:	d002      	beq.n	80066bc <__sflush_r+0x94>
 80066b6:	4628      	mov	r0, r5
 80066b8:	f000 f99c 	bl	80069f4 <_free_r>
 80066bc:	2000      	movs	r0, #0
 80066be:	6360      	str	r0, [r4, #52]	; 0x34
 80066c0:	e7c0      	b.n	8006644 <__sflush_r+0x1c>
 80066c2:	2301      	movs	r3, #1
 80066c4:	4628      	mov	r0, r5
 80066c6:	47b0      	blx	r6
 80066c8:	1c41      	adds	r1, r0, #1
 80066ca:	d1c8      	bne.n	800665e <__sflush_r+0x36>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0c5      	beq.n	800665e <__sflush_r+0x36>
 80066d2:	2b1d      	cmp	r3, #29
 80066d4:	d001      	beq.n	80066da <__sflush_r+0xb2>
 80066d6:	2b16      	cmp	r3, #22
 80066d8:	d101      	bne.n	80066de <__sflush_r+0xb6>
 80066da:	602f      	str	r7, [r5, #0]
 80066dc:	e7b1      	b.n	8006642 <__sflush_r+0x1a>
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	e7ad      	b.n	8006644 <__sflush_r+0x1c>
 80066e8:	690f      	ldr	r7, [r1, #16]
 80066ea:	2f00      	cmp	r7, #0
 80066ec:	d0a9      	beq.n	8006642 <__sflush_r+0x1a>
 80066ee:	0793      	lsls	r3, r2, #30
 80066f0:	680e      	ldr	r6, [r1, #0]
 80066f2:	bf08      	it	eq
 80066f4:	694b      	ldreq	r3, [r1, #20]
 80066f6:	600f      	str	r7, [r1, #0]
 80066f8:	bf18      	it	ne
 80066fa:	2300      	movne	r3, #0
 80066fc:	eba6 0807 	sub.w	r8, r6, r7
 8006700:	608b      	str	r3, [r1, #8]
 8006702:	f1b8 0f00 	cmp.w	r8, #0
 8006706:	dd9c      	ble.n	8006642 <__sflush_r+0x1a>
 8006708:	4643      	mov	r3, r8
 800670a:	463a      	mov	r2, r7
 800670c:	6a21      	ldr	r1, [r4, #32]
 800670e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006710:	4628      	mov	r0, r5
 8006712:	47b0      	blx	r6
 8006714:	2800      	cmp	r0, #0
 8006716:	dc06      	bgt.n	8006726 <__sflush_r+0xfe>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006724:	e78e      	b.n	8006644 <__sflush_r+0x1c>
 8006726:	4407      	add	r7, r0
 8006728:	eba8 0800 	sub.w	r8, r8, r0
 800672c:	e7e9      	b.n	8006702 <__sflush_r+0xda>
 800672e:	bf00      	nop
 8006730:	20400001 	.word	0x20400001

08006734 <_fflush_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	690b      	ldr	r3, [r1, #16]
 8006738:	4605      	mov	r5, r0
 800673a:	460c      	mov	r4, r1
 800673c:	b1db      	cbz	r3, 8006776 <_fflush_r+0x42>
 800673e:	b118      	cbz	r0, 8006748 <_fflush_r+0x14>
 8006740:	6983      	ldr	r3, [r0, #24]
 8006742:	b90b      	cbnz	r3, 8006748 <_fflush_r+0x14>
 8006744:	f000 f860 	bl	8006808 <__sinit>
 8006748:	4b0c      	ldr	r3, [pc, #48]	; (800677c <_fflush_r+0x48>)
 800674a:	429c      	cmp	r4, r3
 800674c:	d109      	bne.n	8006762 <_fflush_r+0x2e>
 800674e:	686c      	ldr	r4, [r5, #4]
 8006750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006754:	b17b      	cbz	r3, 8006776 <_fflush_r+0x42>
 8006756:	4621      	mov	r1, r4
 8006758:	4628      	mov	r0, r5
 800675a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800675e:	f7ff bf63 	b.w	8006628 <__sflush_r>
 8006762:	4b07      	ldr	r3, [pc, #28]	; (8006780 <_fflush_r+0x4c>)
 8006764:	429c      	cmp	r4, r3
 8006766:	d101      	bne.n	800676c <_fflush_r+0x38>
 8006768:	68ac      	ldr	r4, [r5, #8]
 800676a:	e7f1      	b.n	8006750 <_fflush_r+0x1c>
 800676c:	4b05      	ldr	r3, [pc, #20]	; (8006784 <_fflush_r+0x50>)
 800676e:	429c      	cmp	r4, r3
 8006770:	bf08      	it	eq
 8006772:	68ec      	ldreq	r4, [r5, #12]
 8006774:	e7ec      	b.n	8006750 <_fflush_r+0x1c>
 8006776:	2000      	movs	r0, #0
 8006778:	bd38      	pop	{r3, r4, r5, pc}
 800677a:	bf00      	nop
 800677c:	0800752c 	.word	0x0800752c
 8006780:	0800754c 	.word	0x0800754c
 8006784:	0800750c 	.word	0x0800750c

08006788 <std>:
 8006788:	2300      	movs	r3, #0
 800678a:	b510      	push	{r4, lr}
 800678c:	4604      	mov	r4, r0
 800678e:	e9c0 3300 	strd	r3, r3, [r0]
 8006792:	6083      	str	r3, [r0, #8]
 8006794:	8181      	strh	r1, [r0, #12]
 8006796:	6643      	str	r3, [r0, #100]	; 0x64
 8006798:	81c2      	strh	r2, [r0, #14]
 800679a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800679e:	6183      	str	r3, [r0, #24]
 80067a0:	4619      	mov	r1, r3
 80067a2:	2208      	movs	r2, #8
 80067a4:	305c      	adds	r0, #92	; 0x5c
 80067a6:	f7ff fe5c 	bl	8006462 <memset>
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <std+0x38>)
 80067ac:	6263      	str	r3, [r4, #36]	; 0x24
 80067ae:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <std+0x3c>)
 80067b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80067b2:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <std+0x40>)
 80067b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <std+0x44>)
 80067b8:	6224      	str	r4, [r4, #32]
 80067ba:	6323      	str	r3, [r4, #48]	; 0x30
 80067bc:	bd10      	pop	{r4, pc}
 80067be:	bf00      	nop
 80067c0:	08007161 	.word	0x08007161
 80067c4:	08007183 	.word	0x08007183
 80067c8:	080071bb 	.word	0x080071bb
 80067cc:	080071df 	.word	0x080071df

080067d0 <_cleanup_r>:
 80067d0:	4901      	ldr	r1, [pc, #4]	; (80067d8 <_cleanup_r+0x8>)
 80067d2:	f000 b885 	b.w	80068e0 <_fwalk_reent>
 80067d6:	bf00      	nop
 80067d8:	08006735 	.word	0x08006735

080067dc <__sfmoreglue>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	1e4a      	subs	r2, r1, #1
 80067e0:	2568      	movs	r5, #104	; 0x68
 80067e2:	4355      	muls	r5, r2
 80067e4:	460e      	mov	r6, r1
 80067e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067ea:	f000 f951 	bl	8006a90 <_malloc_r>
 80067ee:	4604      	mov	r4, r0
 80067f0:	b140      	cbz	r0, 8006804 <__sfmoreglue+0x28>
 80067f2:	2100      	movs	r1, #0
 80067f4:	e9c0 1600 	strd	r1, r6, [r0]
 80067f8:	300c      	adds	r0, #12
 80067fa:	60a0      	str	r0, [r4, #8]
 80067fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006800:	f7ff fe2f 	bl	8006462 <memset>
 8006804:	4620      	mov	r0, r4
 8006806:	bd70      	pop	{r4, r5, r6, pc}

08006808 <__sinit>:
 8006808:	6983      	ldr	r3, [r0, #24]
 800680a:	b510      	push	{r4, lr}
 800680c:	4604      	mov	r4, r0
 800680e:	bb33      	cbnz	r3, 800685e <__sinit+0x56>
 8006810:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006814:	6503      	str	r3, [r0, #80]	; 0x50
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <__sinit+0x58>)
 8006818:	4a12      	ldr	r2, [pc, #72]	; (8006864 <__sinit+0x5c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6282      	str	r2, [r0, #40]	; 0x28
 800681e:	4298      	cmp	r0, r3
 8006820:	bf04      	itt	eq
 8006822:	2301      	moveq	r3, #1
 8006824:	6183      	streq	r3, [r0, #24]
 8006826:	f000 f81f 	bl	8006868 <__sfp>
 800682a:	6060      	str	r0, [r4, #4]
 800682c:	4620      	mov	r0, r4
 800682e:	f000 f81b 	bl	8006868 <__sfp>
 8006832:	60a0      	str	r0, [r4, #8]
 8006834:	4620      	mov	r0, r4
 8006836:	f000 f817 	bl	8006868 <__sfp>
 800683a:	2200      	movs	r2, #0
 800683c:	60e0      	str	r0, [r4, #12]
 800683e:	2104      	movs	r1, #4
 8006840:	6860      	ldr	r0, [r4, #4]
 8006842:	f7ff ffa1 	bl	8006788 <std>
 8006846:	2201      	movs	r2, #1
 8006848:	2109      	movs	r1, #9
 800684a:	68a0      	ldr	r0, [r4, #8]
 800684c:	f7ff ff9c 	bl	8006788 <std>
 8006850:	2202      	movs	r2, #2
 8006852:	2112      	movs	r1, #18
 8006854:	68e0      	ldr	r0, [r4, #12]
 8006856:	f7ff ff97 	bl	8006788 <std>
 800685a:	2301      	movs	r3, #1
 800685c:	61a3      	str	r3, [r4, #24]
 800685e:	bd10      	pop	{r4, pc}
 8006860:	08007508 	.word	0x08007508
 8006864:	080067d1 	.word	0x080067d1

08006868 <__sfp>:
 8006868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686a:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <__sfp+0x70>)
 800686c:	681e      	ldr	r6, [r3, #0]
 800686e:	69b3      	ldr	r3, [r6, #24]
 8006870:	4607      	mov	r7, r0
 8006872:	b913      	cbnz	r3, 800687a <__sfp+0x12>
 8006874:	4630      	mov	r0, r6
 8006876:	f7ff ffc7 	bl	8006808 <__sinit>
 800687a:	3648      	adds	r6, #72	; 0x48
 800687c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006880:	3b01      	subs	r3, #1
 8006882:	d503      	bpl.n	800688c <__sfp+0x24>
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	b133      	cbz	r3, 8006896 <__sfp+0x2e>
 8006888:	6836      	ldr	r6, [r6, #0]
 800688a:	e7f7      	b.n	800687c <__sfp+0x14>
 800688c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006890:	b16d      	cbz	r5, 80068ae <__sfp+0x46>
 8006892:	3468      	adds	r4, #104	; 0x68
 8006894:	e7f4      	b.n	8006880 <__sfp+0x18>
 8006896:	2104      	movs	r1, #4
 8006898:	4638      	mov	r0, r7
 800689a:	f7ff ff9f 	bl	80067dc <__sfmoreglue>
 800689e:	6030      	str	r0, [r6, #0]
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d1f1      	bne.n	8006888 <__sfp+0x20>
 80068a4:	230c      	movs	r3, #12
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4604      	mov	r4, r0
 80068aa:	4620      	mov	r0, r4
 80068ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ae:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <__sfp+0x74>)
 80068b0:	6665      	str	r5, [r4, #100]	; 0x64
 80068b2:	e9c4 5500 	strd	r5, r5, [r4]
 80068b6:	60a5      	str	r5, [r4, #8]
 80068b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80068bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80068c0:	2208      	movs	r2, #8
 80068c2:	4629      	mov	r1, r5
 80068c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068c8:	f7ff fdcb 	bl	8006462 <memset>
 80068cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068d4:	e7e9      	b.n	80068aa <__sfp+0x42>
 80068d6:	bf00      	nop
 80068d8:	08007508 	.word	0x08007508
 80068dc:	ffff0001 	.word	0xffff0001

080068e0 <_fwalk_reent>:
 80068e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e4:	4680      	mov	r8, r0
 80068e6:	4689      	mov	r9, r1
 80068e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068ec:	2600      	movs	r6, #0
 80068ee:	b914      	cbnz	r4, 80068f6 <_fwalk_reent+0x16>
 80068f0:	4630      	mov	r0, r6
 80068f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80068fa:	3f01      	subs	r7, #1
 80068fc:	d501      	bpl.n	8006902 <_fwalk_reent+0x22>
 80068fe:	6824      	ldr	r4, [r4, #0]
 8006900:	e7f5      	b.n	80068ee <_fwalk_reent+0xe>
 8006902:	89ab      	ldrh	r3, [r5, #12]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d907      	bls.n	8006918 <_fwalk_reent+0x38>
 8006908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800690c:	3301      	adds	r3, #1
 800690e:	d003      	beq.n	8006918 <_fwalk_reent+0x38>
 8006910:	4629      	mov	r1, r5
 8006912:	4640      	mov	r0, r8
 8006914:	47c8      	blx	r9
 8006916:	4306      	orrs	r6, r0
 8006918:	3568      	adds	r5, #104	; 0x68
 800691a:	e7ee      	b.n	80068fa <_fwalk_reent+0x1a>

0800691c <__swhatbuf_r>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	460e      	mov	r6, r1
 8006920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006924:	2900      	cmp	r1, #0
 8006926:	b096      	sub	sp, #88	; 0x58
 8006928:	4614      	mov	r4, r2
 800692a:	461d      	mov	r5, r3
 800692c:	da07      	bge.n	800693e <__swhatbuf_r+0x22>
 800692e:	2300      	movs	r3, #0
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	89b3      	ldrh	r3, [r6, #12]
 8006934:	061a      	lsls	r2, r3, #24
 8006936:	d410      	bmi.n	800695a <__swhatbuf_r+0x3e>
 8006938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800693c:	e00e      	b.n	800695c <__swhatbuf_r+0x40>
 800693e:	466a      	mov	r2, sp
 8006940:	f000 fd34 	bl	80073ac <_fstat_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	dbf2      	blt.n	800692e <__swhatbuf_r+0x12>
 8006948:	9a01      	ldr	r2, [sp, #4]
 800694a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800694e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006952:	425a      	negs	r2, r3
 8006954:	415a      	adcs	r2, r3
 8006956:	602a      	str	r2, [r5, #0]
 8006958:	e7ee      	b.n	8006938 <__swhatbuf_r+0x1c>
 800695a:	2340      	movs	r3, #64	; 0x40
 800695c:	2000      	movs	r0, #0
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	b016      	add	sp, #88	; 0x58
 8006962:	bd70      	pop	{r4, r5, r6, pc}

08006964 <__smakebuf_r>:
 8006964:	898b      	ldrh	r3, [r1, #12]
 8006966:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006968:	079d      	lsls	r5, r3, #30
 800696a:	4606      	mov	r6, r0
 800696c:	460c      	mov	r4, r1
 800696e:	d507      	bpl.n	8006980 <__smakebuf_r+0x1c>
 8006970:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	2301      	movs	r3, #1
 800697a:	6163      	str	r3, [r4, #20]
 800697c:	b002      	add	sp, #8
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	ab01      	add	r3, sp, #4
 8006982:	466a      	mov	r2, sp
 8006984:	f7ff ffca 	bl	800691c <__swhatbuf_r>
 8006988:	9900      	ldr	r1, [sp, #0]
 800698a:	4605      	mov	r5, r0
 800698c:	4630      	mov	r0, r6
 800698e:	f000 f87f 	bl	8006a90 <_malloc_r>
 8006992:	b948      	cbnz	r0, 80069a8 <__smakebuf_r+0x44>
 8006994:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006998:	059a      	lsls	r2, r3, #22
 800699a:	d4ef      	bmi.n	800697c <__smakebuf_r+0x18>
 800699c:	f023 0303 	bic.w	r3, r3, #3
 80069a0:	f043 0302 	orr.w	r3, r3, #2
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	e7e3      	b.n	8006970 <__smakebuf_r+0xc>
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <__smakebuf_r+0x7c>)
 80069aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80069ac:	89a3      	ldrh	r3, [r4, #12]
 80069ae:	6020      	str	r0, [r4, #0]
 80069b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	9b00      	ldr	r3, [sp, #0]
 80069b8:	6163      	str	r3, [r4, #20]
 80069ba:	9b01      	ldr	r3, [sp, #4]
 80069bc:	6120      	str	r0, [r4, #16]
 80069be:	b15b      	cbz	r3, 80069d8 <__smakebuf_r+0x74>
 80069c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069c4:	4630      	mov	r0, r6
 80069c6:	f000 fd03 	bl	80073d0 <_isatty_r>
 80069ca:	b128      	cbz	r0, 80069d8 <__smakebuf_r+0x74>
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	f043 0301 	orr.w	r3, r3, #1
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	431d      	orrs	r5, r3
 80069dc:	81a5      	strh	r5, [r4, #12]
 80069de:	e7cd      	b.n	800697c <__smakebuf_r+0x18>
 80069e0:	080067d1 	.word	0x080067d1

080069e4 <malloc>:
 80069e4:	4b02      	ldr	r3, [pc, #8]	; (80069f0 <malloc+0xc>)
 80069e6:	4601      	mov	r1, r0
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	f000 b851 	b.w	8006a90 <_malloc_r>
 80069ee:	bf00      	nop
 80069f0:	24000010 	.word	0x24000010

080069f4 <_free_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4605      	mov	r5, r0
 80069f8:	2900      	cmp	r1, #0
 80069fa:	d045      	beq.n	8006a88 <_free_r+0x94>
 80069fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a00:	1f0c      	subs	r4, r1, #4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	bfb8      	it	lt
 8006a06:	18e4      	addlt	r4, r4, r3
 8006a08:	f000 fd04 	bl	8007414 <__malloc_lock>
 8006a0c:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <_free_r+0x98>)
 8006a0e:	6813      	ldr	r3, [r2, #0]
 8006a10:	4610      	mov	r0, r2
 8006a12:	b933      	cbnz	r3, 8006a22 <_free_r+0x2e>
 8006a14:	6063      	str	r3, [r4, #4]
 8006a16:	6014      	str	r4, [r2, #0]
 8006a18:	4628      	mov	r0, r5
 8006a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a1e:	f000 bcfa 	b.w	8007416 <__malloc_unlock>
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	d90c      	bls.n	8006a40 <_free_r+0x4c>
 8006a26:	6821      	ldr	r1, [r4, #0]
 8006a28:	1862      	adds	r2, r4, r1
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	bf04      	itt	eq
 8006a2e:	681a      	ldreq	r2, [r3, #0]
 8006a30:	685b      	ldreq	r3, [r3, #4]
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	bf04      	itt	eq
 8006a36:	1852      	addeq	r2, r2, r1
 8006a38:	6022      	streq	r2, [r4, #0]
 8006a3a:	6004      	str	r4, [r0, #0]
 8006a3c:	e7ec      	b.n	8006a18 <_free_r+0x24>
 8006a3e:	4613      	mov	r3, r2
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	b10a      	cbz	r2, 8006a48 <_free_r+0x54>
 8006a44:	42a2      	cmp	r2, r4
 8006a46:	d9fa      	bls.n	8006a3e <_free_r+0x4a>
 8006a48:	6819      	ldr	r1, [r3, #0]
 8006a4a:	1858      	adds	r0, r3, r1
 8006a4c:	42a0      	cmp	r0, r4
 8006a4e:	d10b      	bne.n	8006a68 <_free_r+0x74>
 8006a50:	6820      	ldr	r0, [r4, #0]
 8006a52:	4401      	add	r1, r0
 8006a54:	1858      	adds	r0, r3, r1
 8006a56:	4282      	cmp	r2, r0
 8006a58:	6019      	str	r1, [r3, #0]
 8006a5a:	d1dd      	bne.n	8006a18 <_free_r+0x24>
 8006a5c:	6810      	ldr	r0, [r2, #0]
 8006a5e:	6852      	ldr	r2, [r2, #4]
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	4401      	add	r1, r0
 8006a64:	6019      	str	r1, [r3, #0]
 8006a66:	e7d7      	b.n	8006a18 <_free_r+0x24>
 8006a68:	d902      	bls.n	8006a70 <_free_r+0x7c>
 8006a6a:	230c      	movs	r3, #12
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	e7d3      	b.n	8006a18 <_free_r+0x24>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	1821      	adds	r1, r4, r0
 8006a74:	428a      	cmp	r2, r1
 8006a76:	bf04      	itt	eq
 8006a78:	6811      	ldreq	r1, [r2, #0]
 8006a7a:	6852      	ldreq	r2, [r2, #4]
 8006a7c:	6062      	str	r2, [r4, #4]
 8006a7e:	bf04      	itt	eq
 8006a80:	1809      	addeq	r1, r1, r0
 8006a82:	6021      	streq	r1, [r4, #0]
 8006a84:	605c      	str	r4, [r3, #4]
 8006a86:	e7c7      	b.n	8006a18 <_free_r+0x24>
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	2400009c 	.word	0x2400009c

08006a90 <_malloc_r>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	1ccd      	adds	r5, r1, #3
 8006a94:	f025 0503 	bic.w	r5, r5, #3
 8006a98:	3508      	adds	r5, #8
 8006a9a:	2d0c      	cmp	r5, #12
 8006a9c:	bf38      	it	cc
 8006a9e:	250c      	movcc	r5, #12
 8006aa0:	2d00      	cmp	r5, #0
 8006aa2:	4606      	mov	r6, r0
 8006aa4:	db01      	blt.n	8006aaa <_malloc_r+0x1a>
 8006aa6:	42a9      	cmp	r1, r5
 8006aa8:	d903      	bls.n	8006ab2 <_malloc_r+0x22>
 8006aaa:	230c      	movs	r3, #12
 8006aac:	6033      	str	r3, [r6, #0]
 8006aae:	2000      	movs	r0, #0
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	f000 fcaf 	bl	8007414 <__malloc_lock>
 8006ab6:	4a21      	ldr	r2, [pc, #132]	; (8006b3c <_malloc_r+0xac>)
 8006ab8:	6814      	ldr	r4, [r2, #0]
 8006aba:	4621      	mov	r1, r4
 8006abc:	b991      	cbnz	r1, 8006ae4 <_malloc_r+0x54>
 8006abe:	4c20      	ldr	r4, [pc, #128]	; (8006b40 <_malloc_r+0xb0>)
 8006ac0:	6823      	ldr	r3, [r4, #0]
 8006ac2:	b91b      	cbnz	r3, 8006acc <_malloc_r+0x3c>
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f000 fb3b 	bl	8007140 <_sbrk_r>
 8006aca:	6020      	str	r0, [r4, #0]
 8006acc:	4629      	mov	r1, r5
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f000 fb36 	bl	8007140 <_sbrk_r>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d124      	bne.n	8006b22 <_malloc_r+0x92>
 8006ad8:	230c      	movs	r3, #12
 8006ada:	6033      	str	r3, [r6, #0]
 8006adc:	4630      	mov	r0, r6
 8006ade:	f000 fc9a 	bl	8007416 <__malloc_unlock>
 8006ae2:	e7e4      	b.n	8006aae <_malloc_r+0x1e>
 8006ae4:	680b      	ldr	r3, [r1, #0]
 8006ae6:	1b5b      	subs	r3, r3, r5
 8006ae8:	d418      	bmi.n	8006b1c <_malloc_r+0x8c>
 8006aea:	2b0b      	cmp	r3, #11
 8006aec:	d90f      	bls.n	8006b0e <_malloc_r+0x7e>
 8006aee:	600b      	str	r3, [r1, #0]
 8006af0:	50cd      	str	r5, [r1, r3]
 8006af2:	18cc      	adds	r4, r1, r3
 8006af4:	4630      	mov	r0, r6
 8006af6:	f000 fc8e 	bl	8007416 <__malloc_unlock>
 8006afa:	f104 000b 	add.w	r0, r4, #11
 8006afe:	1d23      	adds	r3, r4, #4
 8006b00:	f020 0007 	bic.w	r0, r0, #7
 8006b04:	1ac3      	subs	r3, r0, r3
 8006b06:	d0d3      	beq.n	8006ab0 <_malloc_r+0x20>
 8006b08:	425a      	negs	r2, r3
 8006b0a:	50e2      	str	r2, [r4, r3]
 8006b0c:	e7d0      	b.n	8006ab0 <_malloc_r+0x20>
 8006b0e:	428c      	cmp	r4, r1
 8006b10:	684b      	ldr	r3, [r1, #4]
 8006b12:	bf16      	itet	ne
 8006b14:	6063      	strne	r3, [r4, #4]
 8006b16:	6013      	streq	r3, [r2, #0]
 8006b18:	460c      	movne	r4, r1
 8006b1a:	e7eb      	b.n	8006af4 <_malloc_r+0x64>
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	6849      	ldr	r1, [r1, #4]
 8006b20:	e7cc      	b.n	8006abc <_malloc_r+0x2c>
 8006b22:	1cc4      	adds	r4, r0, #3
 8006b24:	f024 0403 	bic.w	r4, r4, #3
 8006b28:	42a0      	cmp	r0, r4
 8006b2a:	d005      	beq.n	8006b38 <_malloc_r+0xa8>
 8006b2c:	1a21      	subs	r1, r4, r0
 8006b2e:	4630      	mov	r0, r6
 8006b30:	f000 fb06 	bl	8007140 <_sbrk_r>
 8006b34:	3001      	adds	r0, #1
 8006b36:	d0cf      	beq.n	8006ad8 <_malloc_r+0x48>
 8006b38:	6025      	str	r5, [r4, #0]
 8006b3a:	e7db      	b.n	8006af4 <_malloc_r+0x64>
 8006b3c:	2400009c 	.word	0x2400009c
 8006b40:	240000a0 	.word	0x240000a0

08006b44 <__sfputc_r>:
 8006b44:	6893      	ldr	r3, [r2, #8]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	b410      	push	{r4}
 8006b4c:	6093      	str	r3, [r2, #8]
 8006b4e:	da08      	bge.n	8006b62 <__sfputc_r+0x1e>
 8006b50:	6994      	ldr	r4, [r2, #24]
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	db01      	blt.n	8006b5a <__sfputc_r+0x16>
 8006b56:	290a      	cmp	r1, #10
 8006b58:	d103      	bne.n	8006b62 <__sfputc_r+0x1e>
 8006b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b5e:	f000 bb43 	b.w	80071e8 <__swbuf_r>
 8006b62:	6813      	ldr	r3, [r2, #0]
 8006b64:	1c58      	adds	r0, r3, #1
 8006b66:	6010      	str	r0, [r2, #0]
 8006b68:	7019      	strb	r1, [r3, #0]
 8006b6a:	4608      	mov	r0, r1
 8006b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <__sfputs_r>:
 8006b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	4614      	mov	r4, r2
 8006b7a:	18d5      	adds	r5, r2, r3
 8006b7c:	42ac      	cmp	r4, r5
 8006b7e:	d101      	bne.n	8006b84 <__sfputs_r+0x12>
 8006b80:	2000      	movs	r0, #0
 8006b82:	e007      	b.n	8006b94 <__sfputs_r+0x22>
 8006b84:	463a      	mov	r2, r7
 8006b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7ff ffda 	bl	8006b44 <__sfputc_r>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d1f3      	bne.n	8006b7c <__sfputs_r+0xa>
 8006b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b98 <_vfiprintf_r>:
 8006b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	b09d      	sub	sp, #116	; 0x74
 8006ba0:	4617      	mov	r7, r2
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	b118      	cbz	r0, 8006bb0 <_vfiprintf_r+0x18>
 8006ba8:	6983      	ldr	r3, [r0, #24]
 8006baa:	b90b      	cbnz	r3, 8006bb0 <_vfiprintf_r+0x18>
 8006bac:	f7ff fe2c 	bl	8006808 <__sinit>
 8006bb0:	4b7c      	ldr	r3, [pc, #496]	; (8006da4 <_vfiprintf_r+0x20c>)
 8006bb2:	429c      	cmp	r4, r3
 8006bb4:	d158      	bne.n	8006c68 <_vfiprintf_r+0xd0>
 8006bb6:	6874      	ldr	r4, [r6, #4]
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	0718      	lsls	r0, r3, #28
 8006bbc:	d55e      	bpl.n	8006c7c <_vfiprintf_r+0xe4>
 8006bbe:	6923      	ldr	r3, [r4, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d05b      	beq.n	8006c7c <_vfiprintf_r+0xe4>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	2320      	movs	r3, #32
 8006bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bce:	2330      	movs	r3, #48	; 0x30
 8006bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bd4:	9503      	str	r5, [sp, #12]
 8006bd6:	f04f 0b01 	mov.w	fp, #1
 8006bda:	46b8      	mov	r8, r7
 8006bdc:	4645      	mov	r5, r8
 8006bde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006be2:	b10b      	cbz	r3, 8006be8 <_vfiprintf_r+0x50>
 8006be4:	2b25      	cmp	r3, #37	; 0x25
 8006be6:	d154      	bne.n	8006c92 <_vfiprintf_r+0xfa>
 8006be8:	ebb8 0a07 	subs.w	sl, r8, r7
 8006bec:	d00b      	beq.n	8006c06 <_vfiprintf_r+0x6e>
 8006bee:	4653      	mov	r3, sl
 8006bf0:	463a      	mov	r2, r7
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	f7ff ffbc 	bl	8006b72 <__sfputs_r>
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	f000 80c2 	beq.w	8006d84 <_vfiprintf_r+0x1ec>
 8006c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c02:	4453      	add	r3, sl
 8006c04:	9309      	str	r3, [sp, #36]	; 0x24
 8006c06:	f898 3000 	ldrb.w	r3, [r8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 80ba 	beq.w	8006d84 <_vfiprintf_r+0x1ec>
 8006c10:	2300      	movs	r3, #0
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	9307      	str	r3, [sp, #28]
 8006c1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c22:	931a      	str	r3, [sp, #104]	; 0x68
 8006c24:	46a8      	mov	r8, r5
 8006c26:	2205      	movs	r2, #5
 8006c28:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006c2c:	485e      	ldr	r0, [pc, #376]	; (8006da8 <_vfiprintf_r+0x210>)
 8006c2e:	f7f9 fb57 	bl	80002e0 <memchr>
 8006c32:	9b04      	ldr	r3, [sp, #16]
 8006c34:	bb78      	cbnz	r0, 8006c96 <_vfiprintf_r+0xfe>
 8006c36:	06d9      	lsls	r1, r3, #27
 8006c38:	bf44      	itt	mi
 8006c3a:	2220      	movmi	r2, #32
 8006c3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c40:	071a      	lsls	r2, r3, #28
 8006c42:	bf44      	itt	mi
 8006c44:	222b      	movmi	r2, #43	; 0x2b
 8006c46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c4a:	782a      	ldrb	r2, [r5, #0]
 8006c4c:	2a2a      	cmp	r2, #42	; 0x2a
 8006c4e:	d02a      	beq.n	8006ca6 <_vfiprintf_r+0x10e>
 8006c50:	9a07      	ldr	r2, [sp, #28]
 8006c52:	46a8      	mov	r8, r5
 8006c54:	2000      	movs	r0, #0
 8006c56:	250a      	movs	r5, #10
 8006c58:	4641      	mov	r1, r8
 8006c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c5e:	3b30      	subs	r3, #48	; 0x30
 8006c60:	2b09      	cmp	r3, #9
 8006c62:	d969      	bls.n	8006d38 <_vfiprintf_r+0x1a0>
 8006c64:	b360      	cbz	r0, 8006cc0 <_vfiprintf_r+0x128>
 8006c66:	e024      	b.n	8006cb2 <_vfiprintf_r+0x11a>
 8006c68:	4b50      	ldr	r3, [pc, #320]	; (8006dac <_vfiprintf_r+0x214>)
 8006c6a:	429c      	cmp	r4, r3
 8006c6c:	d101      	bne.n	8006c72 <_vfiprintf_r+0xda>
 8006c6e:	68b4      	ldr	r4, [r6, #8]
 8006c70:	e7a2      	b.n	8006bb8 <_vfiprintf_r+0x20>
 8006c72:	4b4f      	ldr	r3, [pc, #316]	; (8006db0 <_vfiprintf_r+0x218>)
 8006c74:	429c      	cmp	r4, r3
 8006c76:	bf08      	it	eq
 8006c78:	68f4      	ldreq	r4, [r6, #12]
 8006c7a:	e79d      	b.n	8006bb8 <_vfiprintf_r+0x20>
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f000 fb16 	bl	80072b0 <__swsetup_r>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d09d      	beq.n	8006bc4 <_vfiprintf_r+0x2c>
 8006c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c8c:	b01d      	add	sp, #116	; 0x74
 8006c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c92:	46a8      	mov	r8, r5
 8006c94:	e7a2      	b.n	8006bdc <_vfiprintf_r+0x44>
 8006c96:	4a44      	ldr	r2, [pc, #272]	; (8006da8 <_vfiprintf_r+0x210>)
 8006c98:	1a80      	subs	r0, r0, r2
 8006c9a:	fa0b f000 	lsl.w	r0, fp, r0
 8006c9e:	4318      	orrs	r0, r3
 8006ca0:	9004      	str	r0, [sp, #16]
 8006ca2:	4645      	mov	r5, r8
 8006ca4:	e7be      	b.n	8006c24 <_vfiprintf_r+0x8c>
 8006ca6:	9a03      	ldr	r2, [sp, #12]
 8006ca8:	1d11      	adds	r1, r2, #4
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	9103      	str	r1, [sp, #12]
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	db01      	blt.n	8006cb6 <_vfiprintf_r+0x11e>
 8006cb2:	9207      	str	r2, [sp, #28]
 8006cb4:	e004      	b.n	8006cc0 <_vfiprintf_r+0x128>
 8006cb6:	4252      	negs	r2, r2
 8006cb8:	f043 0302 	orr.w	r3, r3, #2
 8006cbc:	9207      	str	r2, [sp, #28]
 8006cbe:	9304      	str	r3, [sp, #16]
 8006cc0:	f898 3000 	ldrb.w	r3, [r8]
 8006cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc6:	d10e      	bne.n	8006ce6 <_vfiprintf_r+0x14e>
 8006cc8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cce:	d138      	bne.n	8006d42 <_vfiprintf_r+0x1aa>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	9203      	str	r2, [sp, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bfb8      	it	lt
 8006cdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ce0:	f108 0802 	add.w	r8, r8, #2
 8006ce4:	9305      	str	r3, [sp, #20]
 8006ce6:	4d33      	ldr	r5, [pc, #204]	; (8006db4 <_vfiprintf_r+0x21c>)
 8006ce8:	f898 1000 	ldrb.w	r1, [r8]
 8006cec:	2203      	movs	r2, #3
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f7f9 faf6 	bl	80002e0 <memchr>
 8006cf4:	b140      	cbz	r0, 8006d08 <_vfiprintf_r+0x170>
 8006cf6:	2340      	movs	r3, #64	; 0x40
 8006cf8:	1b40      	subs	r0, r0, r5
 8006cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	4303      	orrs	r3, r0
 8006d02:	f108 0801 	add.w	r8, r8, #1
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	f898 1000 	ldrb.w	r1, [r8]
 8006d0c:	482a      	ldr	r0, [pc, #168]	; (8006db8 <_vfiprintf_r+0x220>)
 8006d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d12:	2206      	movs	r2, #6
 8006d14:	f108 0701 	add.w	r7, r8, #1
 8006d18:	f7f9 fae2 	bl	80002e0 <memchr>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d037      	beq.n	8006d90 <_vfiprintf_r+0x1f8>
 8006d20:	4b26      	ldr	r3, [pc, #152]	; (8006dbc <_vfiprintf_r+0x224>)
 8006d22:	bb1b      	cbnz	r3, 8006d6c <_vfiprintf_r+0x1d4>
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	3307      	adds	r3, #7
 8006d28:	f023 0307 	bic.w	r3, r3, #7
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	9303      	str	r3, [sp, #12]
 8006d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d32:	444b      	add	r3, r9
 8006d34:	9309      	str	r3, [sp, #36]	; 0x24
 8006d36:	e750      	b.n	8006bda <_vfiprintf_r+0x42>
 8006d38:	fb05 3202 	mla	r2, r5, r2, r3
 8006d3c:	2001      	movs	r0, #1
 8006d3e:	4688      	mov	r8, r1
 8006d40:	e78a      	b.n	8006c58 <_vfiprintf_r+0xc0>
 8006d42:	2300      	movs	r3, #0
 8006d44:	f108 0801 	add.w	r8, r8, #1
 8006d48:	9305      	str	r3, [sp, #20]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	250a      	movs	r5, #10
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d54:	3a30      	subs	r2, #48	; 0x30
 8006d56:	2a09      	cmp	r2, #9
 8006d58:	d903      	bls.n	8006d62 <_vfiprintf_r+0x1ca>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0c3      	beq.n	8006ce6 <_vfiprintf_r+0x14e>
 8006d5e:	9105      	str	r1, [sp, #20]
 8006d60:	e7c1      	b.n	8006ce6 <_vfiprintf_r+0x14e>
 8006d62:	fb05 2101 	mla	r1, r5, r1, r2
 8006d66:	2301      	movs	r3, #1
 8006d68:	4680      	mov	r8, r0
 8006d6a:	e7f0      	b.n	8006d4e <_vfiprintf_r+0x1b6>
 8006d6c:	ab03      	add	r3, sp, #12
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	4622      	mov	r2, r4
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <_vfiprintf_r+0x228>)
 8006d74:	a904      	add	r1, sp, #16
 8006d76:	4630      	mov	r0, r6
 8006d78:	f3af 8000 	nop.w
 8006d7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006d80:	4681      	mov	r9, r0
 8006d82:	d1d5      	bne.n	8006d30 <_vfiprintf_r+0x198>
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	065b      	lsls	r3, r3, #25
 8006d88:	f53f af7e 	bmi.w	8006c88 <_vfiprintf_r+0xf0>
 8006d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d8e:	e77d      	b.n	8006c8c <_vfiprintf_r+0xf4>
 8006d90:	ab03      	add	r3, sp, #12
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	4622      	mov	r2, r4
 8006d96:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <_vfiprintf_r+0x228>)
 8006d98:	a904      	add	r1, sp, #16
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f000 f888 	bl	8006eb0 <_printf_i>
 8006da0:	e7ec      	b.n	8006d7c <_vfiprintf_r+0x1e4>
 8006da2:	bf00      	nop
 8006da4:	0800752c 	.word	0x0800752c
 8006da8:	0800756c 	.word	0x0800756c
 8006dac:	0800754c 	.word	0x0800754c
 8006db0:	0800750c 	.word	0x0800750c
 8006db4:	08007572 	.word	0x08007572
 8006db8:	08007576 	.word	0x08007576
 8006dbc:	00000000 	.word	0x00000000
 8006dc0:	08006b73 	.word	0x08006b73

08006dc4 <_printf_common>:
 8006dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc8:	4691      	mov	r9, r2
 8006dca:	461f      	mov	r7, r3
 8006dcc:	688a      	ldr	r2, [r1, #8]
 8006dce:	690b      	ldr	r3, [r1, #16]
 8006dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	bfb8      	it	lt
 8006dd8:	4613      	movlt	r3, r2
 8006dda:	f8c9 3000 	str.w	r3, [r9]
 8006dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006de2:	4606      	mov	r6, r0
 8006de4:	460c      	mov	r4, r1
 8006de6:	b112      	cbz	r2, 8006dee <_printf_common+0x2a>
 8006de8:	3301      	adds	r3, #1
 8006dea:	f8c9 3000 	str.w	r3, [r9]
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	0699      	lsls	r1, r3, #26
 8006df2:	bf42      	ittt	mi
 8006df4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006df8:	3302      	addmi	r3, #2
 8006dfa:	f8c9 3000 	strmi.w	r3, [r9]
 8006dfe:	6825      	ldr	r5, [r4, #0]
 8006e00:	f015 0506 	ands.w	r5, r5, #6
 8006e04:	d107      	bne.n	8006e16 <_printf_common+0x52>
 8006e06:	f104 0a19 	add.w	sl, r4, #25
 8006e0a:	68e3      	ldr	r3, [r4, #12]
 8006e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	42ab      	cmp	r3, r5
 8006e14:	dc28      	bgt.n	8006e68 <_printf_common+0xa4>
 8006e16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	3300      	adds	r3, #0
 8006e1e:	bf18      	it	ne
 8006e20:	2301      	movne	r3, #1
 8006e22:	0692      	lsls	r2, r2, #26
 8006e24:	d42d      	bmi.n	8006e82 <_printf_common+0xbe>
 8006e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	47c0      	blx	r8
 8006e30:	3001      	adds	r0, #1
 8006e32:	d020      	beq.n	8006e76 <_printf_common+0xb2>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	68e5      	ldr	r5, [r4, #12]
 8006e38:	f8d9 2000 	ldr.w	r2, [r9]
 8006e3c:	f003 0306 	and.w	r3, r3, #6
 8006e40:	2b04      	cmp	r3, #4
 8006e42:	bf08      	it	eq
 8006e44:	1aad      	subeq	r5, r5, r2
 8006e46:	68a3      	ldr	r3, [r4, #8]
 8006e48:	6922      	ldr	r2, [r4, #16]
 8006e4a:	bf0c      	ite	eq
 8006e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e50:	2500      	movne	r5, #0
 8006e52:	4293      	cmp	r3, r2
 8006e54:	bfc4      	itt	gt
 8006e56:	1a9b      	subgt	r3, r3, r2
 8006e58:	18ed      	addgt	r5, r5, r3
 8006e5a:	f04f 0900 	mov.w	r9, #0
 8006e5e:	341a      	adds	r4, #26
 8006e60:	454d      	cmp	r5, r9
 8006e62:	d11a      	bne.n	8006e9a <_printf_common+0xd6>
 8006e64:	2000      	movs	r0, #0
 8006e66:	e008      	b.n	8006e7a <_printf_common+0xb6>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	4630      	mov	r0, r6
 8006e70:	47c0      	blx	r8
 8006e72:	3001      	adds	r0, #1
 8006e74:	d103      	bne.n	8006e7e <_printf_common+0xba>
 8006e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e7e:	3501      	adds	r5, #1
 8006e80:	e7c3      	b.n	8006e0a <_printf_common+0x46>
 8006e82:	18e1      	adds	r1, r4, r3
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	2030      	movs	r0, #48	; 0x30
 8006e88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e8c:	4422      	add	r2, r4
 8006e8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e96:	3302      	adds	r3, #2
 8006e98:	e7c5      	b.n	8006e26 <_printf_common+0x62>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	4622      	mov	r2, r4
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	47c0      	blx	r8
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d0e6      	beq.n	8006e76 <_printf_common+0xb2>
 8006ea8:	f109 0901 	add.w	r9, r9, #1
 8006eac:	e7d8      	b.n	8006e60 <_printf_common+0x9c>
	...

08006eb0 <_printf_i>:
 8006eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eb4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006eb8:	460c      	mov	r4, r1
 8006eba:	7e09      	ldrb	r1, [r1, #24]
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	296e      	cmp	r1, #110	; 0x6e
 8006ec0:	4617      	mov	r7, r2
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	4698      	mov	r8, r3
 8006ec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ec8:	f000 80b3 	beq.w	8007032 <_printf_i+0x182>
 8006ecc:	d822      	bhi.n	8006f14 <_printf_i+0x64>
 8006ece:	2963      	cmp	r1, #99	; 0x63
 8006ed0:	d036      	beq.n	8006f40 <_printf_i+0x90>
 8006ed2:	d80a      	bhi.n	8006eea <_printf_i+0x3a>
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	f000 80b9 	beq.w	800704c <_printf_i+0x19c>
 8006eda:	2958      	cmp	r1, #88	; 0x58
 8006edc:	f000 8083 	beq.w	8006fe6 <_printf_i+0x136>
 8006ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006ee8:	e032      	b.n	8006f50 <_printf_i+0xa0>
 8006eea:	2964      	cmp	r1, #100	; 0x64
 8006eec:	d001      	beq.n	8006ef2 <_printf_i+0x42>
 8006eee:	2969      	cmp	r1, #105	; 0x69
 8006ef0:	d1f6      	bne.n	8006ee0 <_printf_i+0x30>
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	0605      	lsls	r5, r0, #24
 8006ef8:	f103 0104 	add.w	r1, r3, #4
 8006efc:	d52a      	bpl.n	8006f54 <_printf_i+0xa4>
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6011      	str	r1, [r2, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da03      	bge.n	8006f0e <_printf_i+0x5e>
 8006f06:	222d      	movs	r2, #45	; 0x2d
 8006f08:	425b      	negs	r3, r3
 8006f0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f0e:	486f      	ldr	r0, [pc, #444]	; (80070cc <_printf_i+0x21c>)
 8006f10:	220a      	movs	r2, #10
 8006f12:	e039      	b.n	8006f88 <_printf_i+0xd8>
 8006f14:	2973      	cmp	r1, #115	; 0x73
 8006f16:	f000 809d 	beq.w	8007054 <_printf_i+0x1a4>
 8006f1a:	d808      	bhi.n	8006f2e <_printf_i+0x7e>
 8006f1c:	296f      	cmp	r1, #111	; 0x6f
 8006f1e:	d020      	beq.n	8006f62 <_printf_i+0xb2>
 8006f20:	2970      	cmp	r1, #112	; 0x70
 8006f22:	d1dd      	bne.n	8006ee0 <_printf_i+0x30>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	f043 0320 	orr.w	r3, r3, #32
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	e003      	b.n	8006f36 <_printf_i+0x86>
 8006f2e:	2975      	cmp	r1, #117	; 0x75
 8006f30:	d017      	beq.n	8006f62 <_printf_i+0xb2>
 8006f32:	2978      	cmp	r1, #120	; 0x78
 8006f34:	d1d4      	bne.n	8006ee0 <_printf_i+0x30>
 8006f36:	2378      	movs	r3, #120	; 0x78
 8006f38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f3c:	4864      	ldr	r0, [pc, #400]	; (80070d0 <_printf_i+0x220>)
 8006f3e:	e055      	b.n	8006fec <_printf_i+0x13c>
 8006f40:	6813      	ldr	r3, [r2, #0]
 8006f42:	1d19      	adds	r1, r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6011      	str	r1, [r2, #0]
 8006f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f50:	2301      	movs	r3, #1
 8006f52:	e08c      	b.n	800706e <_printf_i+0x1be>
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6011      	str	r1, [r2, #0]
 8006f58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f5c:	bf18      	it	ne
 8006f5e:	b21b      	sxthne	r3, r3
 8006f60:	e7cf      	b.n	8006f02 <_printf_i+0x52>
 8006f62:	6813      	ldr	r3, [r2, #0]
 8006f64:	6825      	ldr	r5, [r4, #0]
 8006f66:	1d18      	adds	r0, r3, #4
 8006f68:	6010      	str	r0, [r2, #0]
 8006f6a:	0628      	lsls	r0, r5, #24
 8006f6c:	d501      	bpl.n	8006f72 <_printf_i+0xc2>
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	e002      	b.n	8006f78 <_printf_i+0xc8>
 8006f72:	0668      	lsls	r0, r5, #25
 8006f74:	d5fb      	bpl.n	8006f6e <_printf_i+0xbe>
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	4854      	ldr	r0, [pc, #336]	; (80070cc <_printf_i+0x21c>)
 8006f7a:	296f      	cmp	r1, #111	; 0x6f
 8006f7c:	bf14      	ite	ne
 8006f7e:	220a      	movne	r2, #10
 8006f80:	2208      	moveq	r2, #8
 8006f82:	2100      	movs	r1, #0
 8006f84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f88:	6865      	ldr	r5, [r4, #4]
 8006f8a:	60a5      	str	r5, [r4, #8]
 8006f8c:	2d00      	cmp	r5, #0
 8006f8e:	f2c0 8095 	blt.w	80070bc <_printf_i+0x20c>
 8006f92:	6821      	ldr	r1, [r4, #0]
 8006f94:	f021 0104 	bic.w	r1, r1, #4
 8006f98:	6021      	str	r1, [r4, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d13d      	bne.n	800701a <_printf_i+0x16a>
 8006f9e:	2d00      	cmp	r5, #0
 8006fa0:	f040 808e 	bne.w	80070c0 <_printf_i+0x210>
 8006fa4:	4665      	mov	r5, ip
 8006fa6:	2a08      	cmp	r2, #8
 8006fa8:	d10b      	bne.n	8006fc2 <_printf_i+0x112>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	07db      	lsls	r3, r3, #31
 8006fae:	d508      	bpl.n	8006fc2 <_printf_i+0x112>
 8006fb0:	6923      	ldr	r3, [r4, #16]
 8006fb2:	6862      	ldr	r2, [r4, #4]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	bfde      	ittt	le
 8006fb8:	2330      	movle	r3, #48	; 0x30
 8006fba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fbe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006fc2:	ebac 0305 	sub.w	r3, ip, r5
 8006fc6:	6123      	str	r3, [r4, #16]
 8006fc8:	f8cd 8000 	str.w	r8, [sp]
 8006fcc:	463b      	mov	r3, r7
 8006fce:	aa03      	add	r2, sp, #12
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7ff fef6 	bl	8006dc4 <_printf_common>
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d14d      	bne.n	8007078 <_printf_i+0x1c8>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe0:	b005      	add	sp, #20
 8006fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fe6:	4839      	ldr	r0, [pc, #228]	; (80070cc <_printf_i+0x21c>)
 8006fe8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006fec:	6813      	ldr	r3, [r2, #0]
 8006fee:	6821      	ldr	r1, [r4, #0]
 8006ff0:	1d1d      	adds	r5, r3, #4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6015      	str	r5, [r2, #0]
 8006ff6:	060a      	lsls	r2, r1, #24
 8006ff8:	d50b      	bpl.n	8007012 <_printf_i+0x162>
 8006ffa:	07ca      	lsls	r2, r1, #31
 8006ffc:	bf44      	itt	mi
 8006ffe:	f041 0120 	orrmi.w	r1, r1, #32
 8007002:	6021      	strmi	r1, [r4, #0]
 8007004:	b91b      	cbnz	r3, 800700e <_printf_i+0x15e>
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	f022 0220 	bic.w	r2, r2, #32
 800700c:	6022      	str	r2, [r4, #0]
 800700e:	2210      	movs	r2, #16
 8007010:	e7b7      	b.n	8006f82 <_printf_i+0xd2>
 8007012:	064d      	lsls	r5, r1, #25
 8007014:	bf48      	it	mi
 8007016:	b29b      	uxthmi	r3, r3
 8007018:	e7ef      	b.n	8006ffa <_printf_i+0x14a>
 800701a:	4665      	mov	r5, ip
 800701c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007020:	fb02 3311 	mls	r3, r2, r1, r3
 8007024:	5cc3      	ldrb	r3, [r0, r3]
 8007026:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800702a:	460b      	mov	r3, r1
 800702c:	2900      	cmp	r1, #0
 800702e:	d1f5      	bne.n	800701c <_printf_i+0x16c>
 8007030:	e7b9      	b.n	8006fa6 <_printf_i+0xf6>
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	6825      	ldr	r5, [r4, #0]
 8007036:	6961      	ldr	r1, [r4, #20]
 8007038:	1d18      	adds	r0, r3, #4
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	0628      	lsls	r0, r5, #24
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	d501      	bpl.n	8007046 <_printf_i+0x196>
 8007042:	6019      	str	r1, [r3, #0]
 8007044:	e002      	b.n	800704c <_printf_i+0x19c>
 8007046:	066a      	lsls	r2, r5, #25
 8007048:	d5fb      	bpl.n	8007042 <_printf_i+0x192>
 800704a:	8019      	strh	r1, [r3, #0]
 800704c:	2300      	movs	r3, #0
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	4665      	mov	r5, ip
 8007052:	e7b9      	b.n	8006fc8 <_printf_i+0x118>
 8007054:	6813      	ldr	r3, [r2, #0]
 8007056:	1d19      	adds	r1, r3, #4
 8007058:	6011      	str	r1, [r2, #0]
 800705a:	681d      	ldr	r5, [r3, #0]
 800705c:	6862      	ldr	r2, [r4, #4]
 800705e:	2100      	movs	r1, #0
 8007060:	4628      	mov	r0, r5
 8007062:	f7f9 f93d 	bl	80002e0 <memchr>
 8007066:	b108      	cbz	r0, 800706c <_printf_i+0x1bc>
 8007068:	1b40      	subs	r0, r0, r5
 800706a:	6060      	str	r0, [r4, #4]
 800706c:	6863      	ldr	r3, [r4, #4]
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	2300      	movs	r3, #0
 8007072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007076:	e7a7      	b.n	8006fc8 <_printf_i+0x118>
 8007078:	6923      	ldr	r3, [r4, #16]
 800707a:	462a      	mov	r2, r5
 800707c:	4639      	mov	r1, r7
 800707e:	4630      	mov	r0, r6
 8007080:	47c0      	blx	r8
 8007082:	3001      	adds	r0, #1
 8007084:	d0aa      	beq.n	8006fdc <_printf_i+0x12c>
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	079b      	lsls	r3, r3, #30
 800708a:	d413      	bmi.n	80070b4 <_printf_i+0x204>
 800708c:	68e0      	ldr	r0, [r4, #12]
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	4298      	cmp	r0, r3
 8007092:	bfb8      	it	lt
 8007094:	4618      	movlt	r0, r3
 8007096:	e7a3      	b.n	8006fe0 <_printf_i+0x130>
 8007098:	2301      	movs	r3, #1
 800709a:	464a      	mov	r2, r9
 800709c:	4639      	mov	r1, r7
 800709e:	4630      	mov	r0, r6
 80070a0:	47c0      	blx	r8
 80070a2:	3001      	adds	r0, #1
 80070a4:	d09a      	beq.n	8006fdc <_printf_i+0x12c>
 80070a6:	3501      	adds	r5, #1
 80070a8:	68e3      	ldr	r3, [r4, #12]
 80070aa:	9a03      	ldr	r2, [sp, #12]
 80070ac:	1a9b      	subs	r3, r3, r2
 80070ae:	42ab      	cmp	r3, r5
 80070b0:	dcf2      	bgt.n	8007098 <_printf_i+0x1e8>
 80070b2:	e7eb      	b.n	800708c <_printf_i+0x1dc>
 80070b4:	2500      	movs	r5, #0
 80070b6:	f104 0919 	add.w	r9, r4, #25
 80070ba:	e7f5      	b.n	80070a8 <_printf_i+0x1f8>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1ac      	bne.n	800701a <_printf_i+0x16a>
 80070c0:	7803      	ldrb	r3, [r0, #0]
 80070c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070ca:	e76c      	b.n	8006fa6 <_printf_i+0xf6>
 80070cc:	0800757d 	.word	0x0800757d
 80070d0:	0800758e 	.word	0x0800758e

080070d4 <_putc_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	460d      	mov	r5, r1
 80070d8:	4614      	mov	r4, r2
 80070da:	4606      	mov	r6, r0
 80070dc:	b118      	cbz	r0, 80070e6 <_putc_r+0x12>
 80070de:	6983      	ldr	r3, [r0, #24]
 80070e0:	b90b      	cbnz	r3, 80070e6 <_putc_r+0x12>
 80070e2:	f7ff fb91 	bl	8006808 <__sinit>
 80070e6:	4b13      	ldr	r3, [pc, #76]	; (8007134 <_putc_r+0x60>)
 80070e8:	429c      	cmp	r4, r3
 80070ea:	d112      	bne.n	8007112 <_putc_r+0x3e>
 80070ec:	6874      	ldr	r4, [r6, #4]
 80070ee:	68a3      	ldr	r3, [r4, #8]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	60a3      	str	r3, [r4, #8]
 80070f6:	da16      	bge.n	8007126 <_putc_r+0x52>
 80070f8:	69a2      	ldr	r2, [r4, #24]
 80070fa:	4293      	cmp	r3, r2
 80070fc:	db02      	blt.n	8007104 <_putc_r+0x30>
 80070fe:	b2eb      	uxtb	r3, r5
 8007100:	2b0a      	cmp	r3, #10
 8007102:	d110      	bne.n	8007126 <_putc_r+0x52>
 8007104:	4622      	mov	r2, r4
 8007106:	4629      	mov	r1, r5
 8007108:	4630      	mov	r0, r6
 800710a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800710e:	f000 b86b 	b.w	80071e8 <__swbuf_r>
 8007112:	4b09      	ldr	r3, [pc, #36]	; (8007138 <_putc_r+0x64>)
 8007114:	429c      	cmp	r4, r3
 8007116:	d101      	bne.n	800711c <_putc_r+0x48>
 8007118:	68b4      	ldr	r4, [r6, #8]
 800711a:	e7e8      	b.n	80070ee <_putc_r+0x1a>
 800711c:	4b07      	ldr	r3, [pc, #28]	; (800713c <_putc_r+0x68>)
 800711e:	429c      	cmp	r4, r3
 8007120:	bf08      	it	eq
 8007122:	68f4      	ldreq	r4, [r6, #12]
 8007124:	e7e3      	b.n	80070ee <_putc_r+0x1a>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	1c5a      	adds	r2, r3, #1
 800712a:	6022      	str	r2, [r4, #0]
 800712c:	701d      	strb	r5, [r3, #0]
 800712e:	b2e8      	uxtb	r0, r5
 8007130:	bd70      	pop	{r4, r5, r6, pc}
 8007132:	bf00      	nop
 8007134:	0800752c 	.word	0x0800752c
 8007138:	0800754c 	.word	0x0800754c
 800713c:	0800750c 	.word	0x0800750c

08007140 <_sbrk_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4c06      	ldr	r4, [pc, #24]	; (800715c <_sbrk_r+0x1c>)
 8007144:	2300      	movs	r3, #0
 8007146:	4605      	mov	r5, r0
 8007148:	4608      	mov	r0, r1
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	f7f9 ff6e 	bl	800102c <_sbrk>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_sbrk_r+0x1a>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	b103      	cbz	r3, 800715a <_sbrk_r+0x1a>
 8007158:	602b      	str	r3, [r5, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	2400022c 	.word	0x2400022c

08007160 <__sread>:
 8007160:	b510      	push	{r4, lr}
 8007162:	460c      	mov	r4, r1
 8007164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007168:	f000 f956 	bl	8007418 <_read_r>
 800716c:	2800      	cmp	r0, #0
 800716e:	bfab      	itete	ge
 8007170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007172:	89a3      	ldrhlt	r3, [r4, #12]
 8007174:	181b      	addge	r3, r3, r0
 8007176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800717a:	bfac      	ite	ge
 800717c:	6563      	strge	r3, [r4, #84]	; 0x54
 800717e:	81a3      	strhlt	r3, [r4, #12]
 8007180:	bd10      	pop	{r4, pc}

08007182 <__swrite>:
 8007182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007186:	461f      	mov	r7, r3
 8007188:	898b      	ldrh	r3, [r1, #12]
 800718a:	05db      	lsls	r3, r3, #23
 800718c:	4605      	mov	r5, r0
 800718e:	460c      	mov	r4, r1
 8007190:	4616      	mov	r6, r2
 8007192:	d505      	bpl.n	80071a0 <__swrite+0x1e>
 8007194:	2302      	movs	r3, #2
 8007196:	2200      	movs	r2, #0
 8007198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719c:	f000 f928 	bl	80073f0 <_lseek_r>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	4632      	mov	r2, r6
 80071ae:	463b      	mov	r3, r7
 80071b0:	4628      	mov	r0, r5
 80071b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b6:	f000 b869 	b.w	800728c <_write_r>

080071ba <__sseek>:
 80071ba:	b510      	push	{r4, lr}
 80071bc:	460c      	mov	r4, r1
 80071be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c2:	f000 f915 	bl	80073f0 <_lseek_r>
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	bf15      	itete	ne
 80071cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80071ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071d6:	81a3      	strheq	r3, [r4, #12]
 80071d8:	bf18      	it	ne
 80071da:	81a3      	strhne	r3, [r4, #12]
 80071dc:	bd10      	pop	{r4, pc}

080071de <__sclose>:
 80071de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e2:	f000 b8d3 	b.w	800738c <_close_r>
	...

080071e8 <__swbuf_r>:
 80071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ea:	460e      	mov	r6, r1
 80071ec:	4614      	mov	r4, r2
 80071ee:	4605      	mov	r5, r0
 80071f0:	b118      	cbz	r0, 80071fa <__swbuf_r+0x12>
 80071f2:	6983      	ldr	r3, [r0, #24]
 80071f4:	b90b      	cbnz	r3, 80071fa <__swbuf_r+0x12>
 80071f6:	f7ff fb07 	bl	8006808 <__sinit>
 80071fa:	4b21      	ldr	r3, [pc, #132]	; (8007280 <__swbuf_r+0x98>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	d12a      	bne.n	8007256 <__swbuf_r+0x6e>
 8007200:	686c      	ldr	r4, [r5, #4]
 8007202:	69a3      	ldr	r3, [r4, #24]
 8007204:	60a3      	str	r3, [r4, #8]
 8007206:	89a3      	ldrh	r3, [r4, #12]
 8007208:	071a      	lsls	r2, r3, #28
 800720a:	d52e      	bpl.n	800726a <__swbuf_r+0x82>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	b363      	cbz	r3, 800726a <__swbuf_r+0x82>
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	1ac0      	subs	r0, r0, r3
 8007216:	6963      	ldr	r3, [r4, #20]
 8007218:	b2f6      	uxtb	r6, r6
 800721a:	4283      	cmp	r3, r0
 800721c:	4637      	mov	r7, r6
 800721e:	dc04      	bgt.n	800722a <__swbuf_r+0x42>
 8007220:	4621      	mov	r1, r4
 8007222:	4628      	mov	r0, r5
 8007224:	f7ff fa86 	bl	8006734 <_fflush_r>
 8007228:	bb28      	cbnz	r0, 8007276 <__swbuf_r+0x8e>
 800722a:	68a3      	ldr	r3, [r4, #8]
 800722c:	3b01      	subs	r3, #1
 800722e:	60a3      	str	r3, [r4, #8]
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	701e      	strb	r6, [r3, #0]
 8007238:	6963      	ldr	r3, [r4, #20]
 800723a:	3001      	adds	r0, #1
 800723c:	4283      	cmp	r3, r0
 800723e:	d004      	beq.n	800724a <__swbuf_r+0x62>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	07db      	lsls	r3, r3, #31
 8007244:	d519      	bpl.n	800727a <__swbuf_r+0x92>
 8007246:	2e0a      	cmp	r6, #10
 8007248:	d117      	bne.n	800727a <__swbuf_r+0x92>
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f7ff fa71 	bl	8006734 <_fflush_r>
 8007252:	b190      	cbz	r0, 800727a <__swbuf_r+0x92>
 8007254:	e00f      	b.n	8007276 <__swbuf_r+0x8e>
 8007256:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <__swbuf_r+0x9c>)
 8007258:	429c      	cmp	r4, r3
 800725a:	d101      	bne.n	8007260 <__swbuf_r+0x78>
 800725c:	68ac      	ldr	r4, [r5, #8]
 800725e:	e7d0      	b.n	8007202 <__swbuf_r+0x1a>
 8007260:	4b09      	ldr	r3, [pc, #36]	; (8007288 <__swbuf_r+0xa0>)
 8007262:	429c      	cmp	r4, r3
 8007264:	bf08      	it	eq
 8007266:	68ec      	ldreq	r4, [r5, #12]
 8007268:	e7cb      	b.n	8007202 <__swbuf_r+0x1a>
 800726a:	4621      	mov	r1, r4
 800726c:	4628      	mov	r0, r5
 800726e:	f000 f81f 	bl	80072b0 <__swsetup_r>
 8007272:	2800      	cmp	r0, #0
 8007274:	d0cc      	beq.n	8007210 <__swbuf_r+0x28>
 8007276:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800727a:	4638      	mov	r0, r7
 800727c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800727e:	bf00      	nop
 8007280:	0800752c 	.word	0x0800752c
 8007284:	0800754c 	.word	0x0800754c
 8007288:	0800750c 	.word	0x0800750c

0800728c <_write_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4c07      	ldr	r4, [pc, #28]	; (80072ac <_write_r+0x20>)
 8007290:	4605      	mov	r5, r0
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	2200      	movs	r2, #0
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f7f9 fd40 	bl	8000d20 <_write>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_write_r+0x1e>
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_write_r+0x1e>
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	2400022c 	.word	0x2400022c

080072b0 <__swsetup_r>:
 80072b0:	4b32      	ldr	r3, [pc, #200]	; (800737c <__swsetup_r+0xcc>)
 80072b2:	b570      	push	{r4, r5, r6, lr}
 80072b4:	681d      	ldr	r5, [r3, #0]
 80072b6:	4606      	mov	r6, r0
 80072b8:	460c      	mov	r4, r1
 80072ba:	b125      	cbz	r5, 80072c6 <__swsetup_r+0x16>
 80072bc:	69ab      	ldr	r3, [r5, #24]
 80072be:	b913      	cbnz	r3, 80072c6 <__swsetup_r+0x16>
 80072c0:	4628      	mov	r0, r5
 80072c2:	f7ff faa1 	bl	8006808 <__sinit>
 80072c6:	4b2e      	ldr	r3, [pc, #184]	; (8007380 <__swsetup_r+0xd0>)
 80072c8:	429c      	cmp	r4, r3
 80072ca:	d10f      	bne.n	80072ec <__swsetup_r+0x3c>
 80072cc:	686c      	ldr	r4, [r5, #4]
 80072ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	0715      	lsls	r5, r2, #28
 80072d6:	d42c      	bmi.n	8007332 <__swsetup_r+0x82>
 80072d8:	06d0      	lsls	r0, r2, #27
 80072da:	d411      	bmi.n	8007300 <__swsetup_r+0x50>
 80072dc:	2209      	movs	r2, #9
 80072de:	6032      	str	r2, [r6, #0]
 80072e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072e4:	81a3      	strh	r3, [r4, #12]
 80072e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ea:	e03e      	b.n	800736a <__swsetup_r+0xba>
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <__swsetup_r+0xd4>)
 80072ee:	429c      	cmp	r4, r3
 80072f0:	d101      	bne.n	80072f6 <__swsetup_r+0x46>
 80072f2:	68ac      	ldr	r4, [r5, #8]
 80072f4:	e7eb      	b.n	80072ce <__swsetup_r+0x1e>
 80072f6:	4b24      	ldr	r3, [pc, #144]	; (8007388 <__swsetup_r+0xd8>)
 80072f8:	429c      	cmp	r4, r3
 80072fa:	bf08      	it	eq
 80072fc:	68ec      	ldreq	r4, [r5, #12]
 80072fe:	e7e6      	b.n	80072ce <__swsetup_r+0x1e>
 8007300:	0751      	lsls	r1, r2, #29
 8007302:	d512      	bpl.n	800732a <__swsetup_r+0x7a>
 8007304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007306:	b141      	cbz	r1, 800731a <__swsetup_r+0x6a>
 8007308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800730c:	4299      	cmp	r1, r3
 800730e:	d002      	beq.n	8007316 <__swsetup_r+0x66>
 8007310:	4630      	mov	r0, r6
 8007312:	f7ff fb6f 	bl	80069f4 <_free_r>
 8007316:	2300      	movs	r3, #0
 8007318:	6363      	str	r3, [r4, #52]	; 0x34
 800731a:	89a3      	ldrh	r3, [r4, #12]
 800731c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007320:	81a3      	strh	r3, [r4, #12]
 8007322:	2300      	movs	r3, #0
 8007324:	6063      	str	r3, [r4, #4]
 8007326:	6923      	ldr	r3, [r4, #16]
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f043 0308 	orr.w	r3, r3, #8
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	6923      	ldr	r3, [r4, #16]
 8007334:	b94b      	cbnz	r3, 800734a <__swsetup_r+0x9a>
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800733c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007340:	d003      	beq.n	800734a <__swsetup_r+0x9a>
 8007342:	4621      	mov	r1, r4
 8007344:	4630      	mov	r0, r6
 8007346:	f7ff fb0d 	bl	8006964 <__smakebuf_r>
 800734a:	89a2      	ldrh	r2, [r4, #12]
 800734c:	f012 0301 	ands.w	r3, r2, #1
 8007350:	d00c      	beq.n	800736c <__swsetup_r+0xbc>
 8007352:	2300      	movs	r3, #0
 8007354:	60a3      	str	r3, [r4, #8]
 8007356:	6963      	ldr	r3, [r4, #20]
 8007358:	425b      	negs	r3, r3
 800735a:	61a3      	str	r3, [r4, #24]
 800735c:	6923      	ldr	r3, [r4, #16]
 800735e:	b953      	cbnz	r3, 8007376 <__swsetup_r+0xc6>
 8007360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007364:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007368:	d1ba      	bne.n	80072e0 <__swsetup_r+0x30>
 800736a:	bd70      	pop	{r4, r5, r6, pc}
 800736c:	0792      	lsls	r2, r2, #30
 800736e:	bf58      	it	pl
 8007370:	6963      	ldrpl	r3, [r4, #20]
 8007372:	60a3      	str	r3, [r4, #8]
 8007374:	e7f2      	b.n	800735c <__swsetup_r+0xac>
 8007376:	2000      	movs	r0, #0
 8007378:	e7f7      	b.n	800736a <__swsetup_r+0xba>
 800737a:	bf00      	nop
 800737c:	24000010 	.word	0x24000010
 8007380:	0800752c 	.word	0x0800752c
 8007384:	0800754c 	.word	0x0800754c
 8007388:	0800750c 	.word	0x0800750c

0800738c <_close_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4c06      	ldr	r4, [pc, #24]	; (80073a8 <_close_r+0x1c>)
 8007390:	2300      	movs	r3, #0
 8007392:	4605      	mov	r5, r0
 8007394:	4608      	mov	r0, r1
 8007396:	6023      	str	r3, [r4, #0]
 8007398:	f7f9 fcee 	bl	8000d78 <_close>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d102      	bne.n	80073a6 <_close_r+0x1a>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	b103      	cbz	r3, 80073a6 <_close_r+0x1a>
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	2400022c 	.word	0x2400022c

080073ac <_fstat_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4c07      	ldr	r4, [pc, #28]	; (80073cc <_fstat_r+0x20>)
 80073b0:	2300      	movs	r3, #0
 80073b2:	4605      	mov	r5, r0
 80073b4:	4608      	mov	r0, r1
 80073b6:	4611      	mov	r1, r2
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	f7f9 fd2d 	bl	8000e18 <_fstat>
 80073be:	1c43      	adds	r3, r0, #1
 80073c0:	d102      	bne.n	80073c8 <_fstat_r+0x1c>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	b103      	cbz	r3, 80073c8 <_fstat_r+0x1c>
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	bd38      	pop	{r3, r4, r5, pc}
 80073ca:	bf00      	nop
 80073cc:	2400022c 	.word	0x2400022c

080073d0 <_isatty_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4c06      	ldr	r4, [pc, #24]	; (80073ec <_isatty_r+0x1c>)
 80073d4:	2300      	movs	r3, #0
 80073d6:	4605      	mov	r5, r0
 80073d8:	4608      	mov	r0, r1
 80073da:	6023      	str	r3, [r4, #0]
 80073dc:	f7f9 fc8a 	bl	8000cf4 <_isatty>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_isatty_r+0x1a>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_isatty_r+0x1a>
 80073e8:	602b      	str	r3, [r5, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	2400022c 	.word	0x2400022c

080073f0 <_lseek_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4c07      	ldr	r4, [pc, #28]	; (8007410 <_lseek_r+0x20>)
 80073f4:	4605      	mov	r5, r0
 80073f6:	4608      	mov	r0, r1
 80073f8:	4611      	mov	r1, r2
 80073fa:	2200      	movs	r2, #0
 80073fc:	6022      	str	r2, [r4, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	f7f9 fcd1 	bl	8000da6 <_lseek>
 8007404:	1c43      	adds	r3, r0, #1
 8007406:	d102      	bne.n	800740e <_lseek_r+0x1e>
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	b103      	cbz	r3, 800740e <_lseek_r+0x1e>
 800740c:	602b      	str	r3, [r5, #0]
 800740e:	bd38      	pop	{r3, r4, r5, pc}
 8007410:	2400022c 	.word	0x2400022c

08007414 <__malloc_lock>:
 8007414:	4770      	bx	lr

08007416 <__malloc_unlock>:
 8007416:	4770      	bx	lr

08007418 <_read_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4c07      	ldr	r4, [pc, #28]	; (8007438 <_read_r+0x20>)
 800741c:	4605      	mov	r5, r0
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	2200      	movs	r2, #0
 8007424:	6022      	str	r2, [r4, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7f9 fcce 	bl	8000dc8 <_read>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_read_r+0x1e>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	b103      	cbz	r3, 8007436 <_read_r+0x1e>
 8007434:	602b      	str	r3, [r5, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	2400022c 	.word	0x2400022c

0800743c <_init>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr

08007448 <_fini>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr
